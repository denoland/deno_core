# Copyright 2018-2025 the Deno authors. MIT license.

[workspace]
resolver = "2"
members = [
  "core",
  "core/examples/snapshot",
  "dcore",
  "ops",
  "ops/compile_test_runner",
  "serde_v8",
  "testing",
]

[workspace.package]
authors = ["the Deno authors"]
edition = "2024"
license = "MIT"
repository = "https://github.com/denoland/deno_core"

[workspace.dependencies]
# Local dependencies
deno_ast = { version = "=0.48.0", features = ["transpiling"] }
deno_core = { version = "0.353.0", path = "./core" }
deno_core_icudata = "0.74.0"
deno_core_testing = { path = "./testing" }
deno_error = { version = "0.6.0", features = ["serde_json", "serde", "url", "tokio"] }
deno_ops = { version = "0.229.0", path = "./ops" }
deno_unsync = "0.4.2"
serde_v8 = { version = "0.262.0", path = "./serde_v8" }
v8 = { version = "137.2.1", default-features = false }

anyhow = "1"
bencher = "0.1"
bincode = "1"
bit-set = "0.8.0"
bit-vec = "0.8.0"
boxed_error = "0.2.3"
bytes = ">=1.6.0"
cooked-waker = "5"
criterion = "0.5"
deno_path_util = "0.4.0"
fastrand = "2"
futures = "0.3.31"
indexmap = "2.8.0"
libc = "0.2.171"
num-bigint = { version = "0.4", features = ["rand"] }
parking_lot = "0.12.3"
paste = "1.0"
percent-encoding = "2.3.1"
pin-project = "1"
pretty_assertions = "1.4.1"
prettyplease = "0.2.31"
rand = "0.8.5"
rstest = "0"
serde = { version = "1", features = ["derive"] }
serde_bytes = "0.11"
serde_json = "1"
smallvec = "1.14"
sourcemap = "9.1.2"
static_assertions = "1"
strum = { version = "0.27.1", features = ["derive"] }
strum_macros = "0.27.1"
testing_macros = "1.0.0"
thiserror = "2"
tokio = { version = "1", features = ["full"] }
twox-hash = { version = "2.1.0", default-features = false, features = ["xxhash64"] }
url = { version = "2", features = ["serde", "expose_internals"] }

# macros
proc-macro-rules = "0.4.0"
proc-macro2 = "1"
quote = "1"
syn = { version = "2", features = ["full", "extra-traits"] }

[profile.dev.package.v8]
# v8 miscompiles at opt-level=0
opt-level = 1

# NB: the `bench` and `release` profiles must remain EXACTLY the same.
[profile.release]
codegen-units = 1
incremental = true
lto = true
opt-level = 'z' # Optimize for size

# Build release with debug symbols: cargo build --profile=release-with-debug
[profile.release-with-debug]
inherits = "release"
debug = true

# NB: the `bench` and `release` profiles must remain EXACTLY the same.
[profile.bench]
codegen-units = 1
incremental = true
lto = true
opt-level = 'z' # Optimize for size
