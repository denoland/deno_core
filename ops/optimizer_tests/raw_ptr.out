#[allow(non_camel_case_types)]
///Auto-generated by `deno_ops`, i.e: `#[op]`
///
///Use `op_ffi_ptr_of::decl()` to get an op-declaration
///you can include in a `deno_core::Extension`.
pub struct op_ffi_ptr_of<FP> {
    _phantom_data: ::std::marker::PhantomData<(FP)>,
}
impl<FP> deno_core::_ops::Op for op_ffi_ptr_of<FP>
where
    FP: FfiPermissions + 'static,
{
    const NAME: &'static str = stringify!(op_ffi_ptr_of);
    const DECL: deno_core::OpDecl = deno_core::_ops::OpDecl::new_internal(
        Self::name(),
        false,
        false,
        false,
        2usize as u8,
        Self::v8_fn_ptr as _,
        {
            use deno_core::v8::fast_api::CType;
            use deno_core::v8::fast_api::Type::*;
            Some(
                deno_core::v8::fast_api::FastFunction::new(
                    &[
                        V8Value,
                        TypedArray(CType::Uint8),
                        TypedArray(CType::Uint32),
                        CallbackOptions,
                    ],
                    CType::Void,
                    Self::op_ffi_ptr_of_fast_fn as *const ::std::ffi::c_void,
                ),
            )
        },
    );
}
#[doc(hidden)]
impl<FP> op_ffi_ptr_of<FP>
where
    FP: FfiPermissions + 'static,
{
    pub const fn name() -> &'static str {
        stringify!(op_ffi_ptr_of)
    }
    #[allow(clippy::not_unsafe_ptr_arg_deref)]
    pub extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let info = unsafe { &*info };
        let scope = &mut unsafe { deno_core::v8::CallbackScope::new(info) };
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
            info,
        );
        let rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
        Self::v8_func(scope, args, rv);
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    #[inline]
    #[allow(clippy::too_many_arguments)]
    #[allow(clippy::extra_unused_lifetimes)]
    fn call<'scope>(state: &mut OpState, buf: *const u8, out: &mut [u32]) {}
    pub fn v8_func<'scope>(
        scope: &mut deno_core::v8::HandleScope<'scope>,
        args: deno_core::v8::FunctionCallbackArguments,
        mut rv: deno_core::v8::ReturnValue,
    ) {
        let ctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        let arg_0 = {
            let value = args.get(0usize as i32);
            match deno_core::v8::Local::<deno_core::v8::ArrayBuffer>::try_from(value) {
                Ok(b) => {
                    if let Some(data) = b.data() {
                        data.cast::<u8>().as_ptr()
                    } else {
                        std::ptr::null::<u8>()
                    }
                }
                Err(_) => {
                    if let Ok(view) = deno_core::v8::Local::<
                        deno_core::v8::ArrayBufferView,
                    >::try_from(value) {
                        let offset = view.byte_offset();
                        let buffer = match view.buffer(scope) {
                            Some(v) => v,
                            None => {
                                return deno_core::_ops::throw_type_error(
                                    scope,
                                    format!("Expected ArrayBufferView at position {}", 0usize),
                                );
                            }
                        };
                        let store = if let Some(data) = buffer.data() {
                            data.cast::<u8>().as_ptr()
                        } else {
                            std::ptr::null_mut::<u8>()
                        };
                        unsafe { store.add(offset) }
                    } else {
                        return deno_core::_ops::throw_type_error(
                            scope,
                            format!("Expected ArrayBufferView at position {}", 0usize),
                        );
                    }
                }
            }
        };
        let arg_1 = if let Ok(view) = deno_core::v8::Local::<
            deno_core::v8::Uint32Array,
        >::try_from(args.get(1usize as i32)) {
            let (offset, len) = (view.byte_offset(), view.byte_length());
            let buffer = match view.buffer(scope) {
                Some(v) => v,
                None => {
                    return deno_core::_ops::throw_type_error(
                        scope,
                        format!("Expected Uint32Array at position {}", 1usize),
                    );
                }
            };
            if let Some(data) = buffer.data() {
                let store = data.cast::<u8>().as_ptr();
                unsafe {
                    ::std::slice::from_raw_parts_mut(
                        store.add(offset) as *mut u32,
                        len / 4,
                    )
                }
            } else {
                &mut []
            }
        } else {
            return deno_core::_ops::throw_type_error(
                scope,
                format!("Expected Uint32Array at position {}", 1usize),
            );
        };
        let result = Self::call(
            &mut ::std::cell::RefCell::borrow_mut(&ctx.state),
            arg_0,
            arg_1,
        );
        let op_state = ::std::cell::RefCell::borrow(&*ctx.state);
        op_state.tracker.track_sync(ctx.id);
    }
}
impl<FP> op_ffi_ptr_of<FP>
where
    FP: FfiPermissions + 'static,
{
    #[allow(clippy::too_many_arguments)]
    fn op_ffi_ptr_of_fast_fn(
        _: deno_core::v8::Local<deno_core::v8::Object>,
        buf: *const deno_core::v8::fast_api::FastApiTypedArray<u8>,
        out: *const deno_core::v8::fast_api::FastApiTypedArray<u32>,
        fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions,
    ) -> () {
        use deno_core::v8;
        use deno_core::_ops;
        let __opts: &mut v8::fast_api::FastApiCallbackOptions = unsafe {
            &mut *fast_api_callback_options
        };
        let __ctx = unsafe {
            &*(v8::Local::<v8::External>::cast(unsafe { __opts.data.data }).value()
                as *const _ops::OpCtx)
        };
        let state = &mut ::std::cell::RefCell::borrow_mut(&__ctx.state);
        let buf = unsafe { (&*buf).get_storage_if_aligned().unwrap_unchecked() }
            .as_ptr();
        let out = match unsafe { &*out }.get_storage_if_aligned() {
            Some(v) => v,
            None => {
                unsafe { &mut *fast_api_callback_options }.fallback = true;
                return Default::default();
            }
        };
        let result = Self::call(state, buf, out);
        result
    }
}
