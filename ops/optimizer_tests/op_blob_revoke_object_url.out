#[allow(non_camel_case_types)]
///Auto-generated by `deno_ops`, i.e: `#[op]`
///
///Use `op_blob_revoke_object_url::decl()` to get an op-declaration
///you can include in a `deno_core::Extension`.
pub struct op_blob_revoke_object_url {
    _phantom_data: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_blob_revoke_object_url {
    const NAME: &'static str = stringify!(op_blob_revoke_object_url);
    const DECL: deno_core::OpDecl = deno_core::_ops::OpDecl::new_internal(
        Self::name(),
        false,
        false,
        false,
        1usize as u8,
        Self::v8_fn_ptr as _,
        None,
    );
}
#[doc(hidden)]
impl op_blob_revoke_object_url {
    pub const fn name() -> &'static str {
        stringify!(op_blob_revoke_object_url)
    }
    #[allow(clippy::not_unsafe_ptr_arg_deref)]
    pub extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let info = unsafe { &*info };
        let scope = &mut unsafe { deno_core::v8::CallbackScope::new(info) };
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
            info,
        );
        let rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
        Self::v8_func(scope, args, rv);
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    #[inline]
    #[allow(clippy::too_many_arguments)]
    #[allow(clippy::extra_unused_lifetimes)]
    pub fn call<'scope>(state: &mut OpState, url: String) -> Result<(), AnyError> {
        let url = Url::parse(&url)?;
        let blob_store = state.borrow::<BlobStore>();
        blob_store.remove_object_url(&url);
        Ok(())
    }
    pub fn v8_func<'scope>(
        scope: &mut deno_core::v8::HandleScope<'scope>,
        args: deno_core::v8::FunctionCallbackArguments,
        mut rv: deno_core::v8::ReturnValue,
    ) {
        let ctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        let arg_0 = match deno_core::v8::Local::<
            deno_core::v8::String,
        >::try_from(args.get(0usize as i32)) {
            Ok(v8_string) => deno_core::serde_v8::to_utf8(v8_string, scope),
            Err(_) => {
                return deno_core::_ops::throw_type_error(
                    scope,
                    format!("Expected string at position {}", 0usize),
                );
            }
        };
        let result = Self::call(
            &mut ::std::cell::RefCell::borrow_mut(&ctx.state),
            arg_0,
        );
        let op_state = ::std::cell::RefCell::borrow(&*ctx.state);
        op_state.tracker.track_sync(ctx.id);
        match result {
            Ok(result) => {}
            Err(err) => {
                let exception = deno_core::error::to_v8_error(
                    scope,
                    ctx.get_error_class_fn,
                    &err,
                );
                scope.throw_exception(exception);
            }
        };
    }
}
