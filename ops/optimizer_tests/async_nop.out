#[allow(non_camel_case_types)]
///Auto-generated by `deno_ops`, i.e: `#[op]`
///
///Use `op_void_async::decl()` to get an op-declaration
///you can include in a `deno_core::Extension`.
pub struct op_void_async {
    _phantom_data: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_void_async {
    #[deprecated = "#[op] is deprecated. Please switch this op to #[op2]."]
    const NAME: &'static str = stringify!(op_void_async);
    #[deprecated = "#[op] is deprecated. Please switch this op to #[op2]."]
    const DECL: deno_core::OpDecl = deno_core::_ops::OpDecl::new_internal(
        Self::name(),
        true,
        false,
        false,
        1usize as u8,
        Self::v8_fn_ptr as _,
        {
            use deno_core::v8::fast_api::CType;
            use deno_core::v8::fast_api::Type::*;
            Some(
                deno_core::v8::fast_api::FastFunction::new(
                    &[V8Value, Int32, CallbackOptions],
                    CType::Void,
                    Self::op_void_async_fast_fn as *const ::std::ffi::c_void,
                ),
            )
        },
    );
}
#[doc(hidden)]
impl op_void_async {
    #[deprecated = "#[op] is deprecated. Please switch this op to #[op2]."]
    pub const fn name() -> &'static str {
        stringify!(op_void_async)
    }
    #[allow(clippy::not_unsafe_ptr_arg_deref)]
    pub extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let info = unsafe { &*info };
        let scope = &mut unsafe { deno_core::v8::CallbackScope::new(info) };
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
            info,
        );
        let rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
        Self::v8_func(scope, args, rv);
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    #[inline]
    #[allow(clippy::too_many_arguments)]
    #[allow(clippy::extra_unused_lifetimes)]
    async fn call<'scope>() {}
    pub fn v8_func<'scope>(
        scope: &mut deno_core::v8::HandleScope<'scope>,
        args: deno_core::v8::FunctionCallbackArguments,
        mut rv: deno_core::v8::ReturnValue,
    ) {
        use deno_core::futures::FutureExt;
        let ctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        let promise_id = args.get(0);
        let promise_id = deno_core::v8::Local::<
            deno_core::v8::Integer,
        >::try_from(promise_id)
            .map(|l| l.value() as deno_core::PromiseId)
            .map_err(deno_core::anyhow::Error::from);
        let promise_id: deno_core::PromiseId = match promise_id {
            Ok(promise_id) => promise_id,
            Err(err) => {
                deno_core::_ops::throw_type_error(
                    scope,
                    format!("invalid promise id: {}", err),
                );
                return;
            }
        };
        let fut = deno_core::_ops::map_async_op2(ctx, Self::call());
        let maybe_response = deno_core::_ops::queue_async_op(
            ctx,
            scope,
            false,
            promise_id,
            fut,
        );
        if let Some(response) = maybe_response {
            rv.set(response);
        }
    }
}
impl op_void_async {
    #[allow(clippy::too_many_arguments)]
    fn op_void_async_fast_fn(
        _: deno_core::v8::Local<deno_core::v8::Object>,
        __promise_id: i32,
        fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions,
    ) -> () {
        use deno_core::v8;
        use deno_core::_ops;
        let __opts: &mut v8::fast_api::FastApiCallbackOptions = unsafe {
            &mut *fast_api_callback_options
        };
        let __ctx = unsafe {
            &*(v8::Local::<v8::External>::cast(unsafe { __opts.data.data }).value()
                as *const _ops::OpCtx)
        };
        let op_state = __ctx.state.clone();
        let result = Self::call();
        let result = _ops::queue_fast_async_op(
            __ctx,
            __promise_id,
            async move { Ok(result.await) },
        );
        result
    }
}
