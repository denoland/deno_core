#[allow(non_camel_case_types)]
pub struct op_async_result_impl {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_async_result_impl {
    const NAME: &'static str = stringify!(op_async_result_impl);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal_op2(
        stringify!(op_async_result_impl),
        true,
        2usize as u8,
        Self::v8_fn_ptr as _,
        Self::v8_fn_ptr_metrics as _,
        None,
        None,
    );
}
impl op_async_result_impl {
    pub const fn name() -> &'static str {
        stringify!(op_async_result_impl)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let opctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        if opctx.metrics_enabled() {
            deno_core::_ops::dispatch_metrics_async(
                &opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
        }
        let result = {
            let arg0 = args.get(1usize as i32);
            let Some(arg0) = deno_core::_ops::to_i32_option(&arg0) else {
                let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
                let msg = deno_core::v8::String::new_from_one_byte(
                        &mut scope,
                        "expected i32".as_bytes(),
                        deno_core::v8::NewStringType::Normal,
                    )
                    .unwrap();
                let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                scope.throw_exception(exc);
                return;
            };
            let arg0 = arg0 as _;
            Self::call(arg0)
        };
        let result = match result {
            Ok(result) => result,
            Err(err) => {
                if opctx.metrics_enabled() {
                    deno_core::_ops::dispatch_metrics_async(
                        &opctx,
                        deno_core::_ops::OpMetricsEvent::Error,
                    );
                }
                let err = err.into();
                let exception = deno_core::error::to_v8_error(
                    &mut scope,
                    opctx.get_error_class_fn,
                    &err,
                );
                scope.throw_exception(exception);
                return;
            }
        };
        let promise_id = deno_core::_ops::to_i32_option(&args.get(0))
            .unwrap_or_default();
        if let Some(result) = deno_core::_ops::map_async_op_fallible(
            opctx,
            false,
            false,
            promise_id,
            result,
            |scope, result| { Ok(deno_core::_ops::RustToV8::to_v8(result, scope)) },
        ) {
            match result {
                Ok(result) => deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv),
                Err(err) => {
                    let err = err.into();
                    let exception = deno_core::error::to_v8_error(
                        &mut scope,
                        opctx.get_error_class_fn,
                        &err,
                    );
                    scope.throw_exception(exception);
                    return;
                }
            };
        }
    }
    extern "C" fn v8_fn_ptr_metrics(info: *const deno_core::v8::FunctionCallbackInfo) {
        Self::v8_fn_ptr(info)
    }
    #[inline(always)]
    pub fn call(x: i32) -> Result<impl Future<Output = std::io::Result<i32>>, AnyError> {
        Ok(async move { Ok(x) })
    }
}
