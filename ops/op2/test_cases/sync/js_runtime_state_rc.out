#[allow(non_camel_case_types)]
struct js_runtime_state_rc {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for js_runtime_state_rc {
    const NAME: &'static str = stringify!(js_runtime_state_rc);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(js_runtime_state_rc),
        false,
        false,
        false,
        1usize as u8,
        Self::v8_fn_ptr as _,
        Some({
            use deno_core::v8::fast_api::Type;
            use deno_core::v8::fast_api::CType;
            deno_core::v8::fast_api::FastFunction::new_with_bigint(
                &[Type::V8Value, Type::CallbackOptions],
                CType::Void,
                Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
            )
        }),
    );
}
impl js_runtime_state_rc {
    pub const fn name() -> &'static str {
        stringify!(js_runtime_state_rc)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    fn v8_fn_ptr_fast(
        _: deno_core::v8::Local<deno_core::v8::Object>,
        fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions,
    ) -> () {
        let fast_api_callback_options = unsafe { &mut *fast_api_callback_options };
        let opctx = unsafe {
            &*(deno_core::v8::Local::<
                deno_core::v8::External,
            >::cast(unsafe { fast_api_callback_options.data.data })
                .value() as *const deno_core::_ops::OpCtx)
        };
        let js_runtime_state = std::rc::Weak::upgrade(&opctx.runtime_state).unwrap();
        let result = {
            let arg0 = js_runtime_state.unwrap();
            Self::call(arg0)
        };
        result as _
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let opctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        let js_runtime_state = std::rc::Weak::upgrade(&opctx.runtime_state).unwrap();
        let result = {
            let arg0 = js_runtime_state.unwrap();
            Self::call(arg0)
        };
        deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv)
    }
    #[inline(always)]
    fn call(_state: Rc<RefCell<JsRuntimeState>>) {}
}
