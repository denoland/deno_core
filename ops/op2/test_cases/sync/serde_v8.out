#[allow(non_camel_case_types)]
pub struct op_serde_v8 {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_serde_v8 {
    const NAME: &'static str = stringify!(op_serde_v8);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_serde_v8),
        false,
        false,
        false,
        1usize as u8,
        Self::v8_fn_ptr as _,
        None,
    );
}
impl op_serde_v8 {
    pub const fn name() -> &'static str {
        stringify!(op_serde_v8)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let result = {
            let arg0 = args.get(0usize as i32);
            let arg0 = match deno_core::_ops::serde_v8_to_rust(&mut scope, arg0) {
                Ok(t) => t,
                Err(arg0_err) => {
                    let msg = deno_core::v8::String::new(
                            &mut scope,
                            &format!("{}", deno_core::anyhow::Error::from(arg0_err)),
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return;
                }
            };
            Self::call(arg0)
        };
        match deno_core::_ops::RustToV8Fallible::to_v8_fallible(
            deno_core::_ops::RustToV8Marker::<
                deno_core::_ops::SerdeMarker,
                _,
            >::from(result),
            &mut scope,
        ) {
            Ok(v) => rv.set(v),
            Err(rv_err) => {
                let msg = deno_core::v8::String::new(
                        &mut scope,
                        &format!("{}", deno_core::anyhow::Error::from(rv_err)),
                    )
                    .unwrap();
                let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                scope.throw_exception(exc);
                return;
            }
        }
    }
    #[inline(always)]
    pub fn call(_input: Input) -> Output {
        Output {}
    }
}
