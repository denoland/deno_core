#[allow(non_camel_case_types)]
struct op_smi_unsigned_return {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_smi_unsigned_return {
    const NAME: &'static str = stringify!(op_smi_unsigned_return);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_smi_unsigned_return),
        false,
        false,
        false,
        4usize as u8,
        Self::v8_fn_ptr as _,
        Some({
            use deno_core::v8::fast_api::Type;
            use deno_core::v8::fast_api::CType;
            deno_core::v8::fast_api::FastFunction::new_with_bigint(
                &[Type::V8Value, Type::Int32, Type::Int32, Type::Int32, Type::Int32],
                CType::Int32,
                Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
            )
        }),
    );
}
impl op_smi_unsigned_return {
    pub const fn name() -> &'static str {
        stringify!(op_smi_unsigned_return)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    fn v8_fn_ptr_fast(
        _: deno_core::v8::Local<deno_core::v8::Object>,
        arg0: i32,
        arg1: i32,
        arg2: i32,
        arg3: i32,
    ) -> i32 {
        let result = {
            let arg0 = arg0 as _;
            let arg1 = arg1 as _;
            let arg2 = arg2 as _;
            let arg3 = arg3 as _;
            Self::call(arg0, arg1, arg2, arg3)
        };
        result as _
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let result = {
            let arg0 = args.get(0usize as i32);
            let Some(arg0) = deno_core::_ops::to_i32_option(&arg0) else {
                let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
                let msg = deno_core::v8::String::new_from_one_byte(
                        &mut scope,
                        "expected i32".as_bytes(),
                        deno_core::v8::NewStringType::Normal,
                    )
                    .unwrap();
                let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                scope.throw_exception(exc);
                return;
            };
            let arg0 = arg0 as _;
            let arg1 = args.get(1usize as i32);
            let Some(arg1) = deno_core::_ops::to_i32_option(&arg1) else {
                let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
                let msg = deno_core::v8::String::new_from_one_byte(
                        &mut scope,
                        "expected i32".as_bytes(),
                        deno_core::v8::NewStringType::Normal,
                    )
                    .unwrap();
                let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                scope.throw_exception(exc);
                return;
            };
            let arg1 = arg1 as _;
            let arg2 = args.get(2usize as i32);
            let Some(arg2) = deno_core::_ops::to_i32_option(&arg2) else {
                let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
                let msg = deno_core::v8::String::new_from_one_byte(
                        &mut scope,
                        "expected i32".as_bytes(),
                        deno_core::v8::NewStringType::Normal,
                    )
                    .unwrap();
                let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                scope.throw_exception(exc);
                return;
            };
            let arg2 = arg2 as _;
            let arg3 = args.get(3usize as i32);
            let Some(arg3) = deno_core::_ops::to_i32_option(&arg3) else {
                let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
                let msg = deno_core::v8::String::new_from_one_byte(
                        &mut scope,
                        "expected i32".as_bytes(),
                        deno_core::v8::NewStringType::Normal,
                    )
                    .unwrap();
                let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                scope.throw_exception(exc);
                return;
            };
            let arg3 = arg3 as _;
            Self::call(arg0, arg1, arg2, arg3)
        };
        deno_core::_ops::RustToV8RetVal::to_v8_rv(
            deno_core::_ops::RustToV8Marker::<
                deno_core::_ops::SmiMarker,
                _,
            >::from(result),
            &mut rv,
        )
    }
    #[inline(always)]
    fn call(a: Int16, b: Int32, c: Uint16, d: Uint32) -> Uint32 {
        a as Uint32 + b as Uint32 + c as Uint32 + d as Uint32
    }
}

#[allow(non_camel_case_types)]
struct op_smi_signed_return {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_smi_signed_return {
    const NAME: &'static str = stringify!(op_smi_signed_return);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_smi_signed_return),
        false,
        false,
        false,
        4usize as u8,
        Self::v8_fn_ptr as _,
        Some({
            use deno_core::v8::fast_api::Type;
            use deno_core::v8::fast_api::CType;
            deno_core::v8::fast_api::FastFunction::new_with_bigint(
                &[Type::V8Value, Type::Int32, Type::Int32, Type::Int32, Type::Int32],
                CType::Int32,
                Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
            )
        }),
    );
}
impl op_smi_signed_return {
    pub const fn name() -> &'static str {
        stringify!(op_smi_signed_return)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    fn v8_fn_ptr_fast(
        _: deno_core::v8::Local<deno_core::v8::Object>,
        arg0: i32,
        arg1: i32,
        arg2: i32,
        arg3: i32,
    ) -> i32 {
        let result = {
            let arg0 = arg0 as _;
            let arg1 = arg1 as _;
            let arg2 = arg2 as _;
            let arg3 = arg3 as _;
            Self::call(arg0, arg1, arg2, arg3)
        };
        result as _
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let result = {
            let arg0 = args.get(0usize as i32);
            let Some(arg0) = deno_core::_ops::to_i32_option(&arg0) else {
                let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
                let msg = deno_core::v8::String::new_from_one_byte(
                        &mut scope,
                        "expected i32".as_bytes(),
                        deno_core::v8::NewStringType::Normal,
                    )
                    .unwrap();
                let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                scope.throw_exception(exc);
                return;
            };
            let arg0 = arg0 as _;
            let arg1 = args.get(1usize as i32);
            let Some(arg1) = deno_core::_ops::to_i32_option(&arg1) else {
                let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
                let msg = deno_core::v8::String::new_from_one_byte(
                        &mut scope,
                        "expected i32".as_bytes(),
                        deno_core::v8::NewStringType::Normal,
                    )
                    .unwrap();
                let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                scope.throw_exception(exc);
                return;
            };
            let arg1 = arg1 as _;
            let arg2 = args.get(2usize as i32);
            let Some(arg2) = deno_core::_ops::to_i32_option(&arg2) else {
                let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
                let msg = deno_core::v8::String::new_from_one_byte(
                        &mut scope,
                        "expected i32".as_bytes(),
                        deno_core::v8::NewStringType::Normal,
                    )
                    .unwrap();
                let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                scope.throw_exception(exc);
                return;
            };
            let arg2 = arg2 as _;
            let arg3 = args.get(3usize as i32);
            let Some(arg3) = deno_core::_ops::to_i32_option(&arg3) else {
                let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
                let msg = deno_core::v8::String::new_from_one_byte(
                        &mut scope,
                        "expected i32".as_bytes(),
                        deno_core::v8::NewStringType::Normal,
                    )
                    .unwrap();
                let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                scope.throw_exception(exc);
                return;
            };
            let arg3 = arg3 as _;
            Self::call(arg0, arg1, arg2, arg3)
        };
        deno_core::_ops::RustToV8RetVal::to_v8_rv(
            deno_core::_ops::RustToV8Marker::<
                deno_core::_ops::SmiMarker,
                _,
            >::from(result),
            &mut rv,
        )
    }
    #[inline(always)]
    fn call(a: Int16, b: Int32, c: Uint16, d: Uint32) -> Int32 {
        a as Int32 + b as Int32 + c as Int32 + d as Int32
    }
}

#[allow(non_camel_case_types)]
struct op_smi_option {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_smi_option {
    const NAME: &'static str = stringify!(op_smi_option);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_smi_option),
        false,
        false,
        false,
        1usize as u8,
        Self::v8_fn_ptr as _,
        None,
    );
}
impl op_smi_option {
    pub const fn name() -> &'static str {
        stringify!(op_smi_option)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let result = {
            let arg0 = args.get(0usize as i32);
            let arg0 = if arg0.is_null_or_undefined() {
                None
            } else {
                let Some(arg0) = deno_core::_ops::to_i32_option(&arg0) else {
                    let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
                    let msg = deno_core::v8::String::new_from_one_byte(
                            &mut scope,
                            "expected i32".as_bytes(),
                            deno_core::v8::NewStringType::Normal,
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return;
                };
                let arg0 = arg0 as _;
                Some(arg0)
            };
            Self::call(arg0)
        };
        deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv)
    }
    #[inline(always)]
    fn call(a: Option<Uint32>) -> Option<Uint32> {
        a
    }
}
