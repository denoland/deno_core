#[allow(non_camel_case_types)]
const fn op_smi_unsigned_return() -> ::deno_core::_ops::OpDecl {
    #[allow(non_camel_case_types)]
    struct op_smi_unsigned_return {
        _unconstructable: ::std::marker::PhantomData<()>,
    }
    impl ::deno_core::_ops::Op for op_smi_unsigned_return {
        const NAME: &'static str = stringify!(op_smi_unsigned_return);
        const DECL: ::deno_core::_ops::OpDecl = ::deno_core::_ops::OpDecl::new_internal_op2(
            ::deno_core::__op_name_fast!(op_smi_unsigned_return),
            false,
            false,
            4usize as u8,
            Self::v8_fn_ptr as _,
            Self::v8_fn_ptr_metrics as _,
            Some({
                use deno_core::v8::fast_api::Type;
                use deno_core::v8::fast_api::CType;
                deno_core::v8::fast_api::FastFunction::new_with_bigint(
                    &[Type::V8Value, Type::Int32, Type::Int32, Type::Int32, Type::Int32],
                    CType::Int32,
                    Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
                )
            }),
            Some({
                use deno_core::v8::fast_api::Type;
                use deno_core::v8::fast_api::CType;
                deno_core::v8::fast_api::FastFunction::new_with_bigint(
                    &[
                        Type::V8Value,
                        Type::Int32,
                        Type::Int32,
                        Type::Int32,
                        Type::Int32,
                        Type::CallbackOptions,
                    ],
                    CType::Int32,
                    Self::v8_fn_ptr_fast_metrics as *const ::std::ffi::c_void,
                )
            }),
            ::deno_core::OpMetadata {
                ..::deno_core::OpMetadata::default()
            },
        );
    }
    impl op_smi_unsigned_return {
        pub const fn name() -> &'static str {
            stringify!(op_smi_unsigned_return)
        }
        #[allow(clippy::too_many_arguments)]
        extern "C" fn v8_fn_ptr_fast_metrics<'s>(
            this: deno_core::v8::Local<deno_core::v8::Object>,
            arg0: i32,
            arg1: i32,
            arg2: i32,
            arg3: i32,
            fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions<
                's,
            >,
        ) -> i32 {
            let fast_api_callback_options: &'s mut _ = unsafe {
                &mut *fast_api_callback_options
            };
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<
                    deno_core::v8::External,
                >::cast(unsafe { fast_api_callback_options.data.data })
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_fast(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::v8_fn_ptr_fast(this, arg0, arg1, arg2, arg3);
            deno_core::_ops::dispatch_metrics_fast(
                opctx,
                deno_core::_ops::OpMetricsEvent::Completed,
            );
            res
        }
        #[allow(clippy::too_many_arguments)]
        extern "C" fn v8_fn_ptr_fast<'s>(
            this: deno_core::v8::Local<deno_core::v8::Object>,
            arg0: i32,
            arg1: i32,
            arg2: i32,
            arg3: i32,
        ) -> i32 {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let result = {
                let arg0 = arg0 as _;
                let arg1 = arg1 as _;
                let arg2 = arg2 as _;
                let arg3 = arg3 as _;
                Self::call(arg0, arg1, arg2, arg3)
            };
            result as _
        }
        #[inline(always)]
        fn slow_function_impl<'s>(
            info: &'s deno_core::v8::FunctionCallbackInfo,
        ) -> usize {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let result = {
                let arg0 = args.get(0usize as i32);
                let Some(arg0) = deno_core::_ops::to_i32_option(&arg0) else {
                    let mut scope = unsafe { deno_core::v8::CallbackScope::new(info) };
                    let msg = deno_core::v8::String::new_from_one_byte(
                            &mut scope,
                            "expected i32".as_bytes(),
                            deno_core::v8::NewStringType::Normal,
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return 1;
                };
                let arg0 = arg0 as _;
                let arg1 = args.get(1usize as i32);
                let Some(arg1) = deno_core::_ops::to_i32_option(&arg1) else {
                    let mut scope = unsafe { deno_core::v8::CallbackScope::new(info) };
                    let msg = deno_core::v8::String::new_from_one_byte(
                            &mut scope,
                            "expected i32".as_bytes(),
                            deno_core::v8::NewStringType::Normal,
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return 1;
                };
                let arg1 = arg1 as _;
                let arg2 = args.get(2usize as i32);
                let Some(arg2) = deno_core::_ops::to_i32_option(&arg2) else {
                    let mut scope = unsafe { deno_core::v8::CallbackScope::new(info) };
                    let msg = deno_core::v8::String::new_from_one_byte(
                            &mut scope,
                            "expected i32".as_bytes(),
                            deno_core::v8::NewStringType::Normal,
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return 1;
                };
                let arg2 = arg2 as _;
                let arg3 = args.get(3usize as i32);
                let Some(arg3) = deno_core::_ops::to_i32_option(&arg3) else {
                    let mut scope = unsafe { deno_core::v8::CallbackScope::new(info) };
                    let msg = deno_core::v8::String::new_from_one_byte(
                            &mut scope,
                            "expected i32".as_bytes(),
                            deno_core::v8::NewStringType::Normal,
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return 1;
                };
                let arg3 = arg3 as _;
                Self::call(arg0, arg1, arg2, arg3)
            };
            deno_core::_ops::RustToV8RetVal::to_v8_rv(
                deno_core::_ops::RustToV8Marker::<
                    deno_core::_ops::SmiMarker,
                    _,
                >::from(result),
                &mut rv,
            );
            return 0;
        }
        extern "C" fn v8_fn_ptr<'s>(info: *const deno_core::v8::FunctionCallbackInfo) {
            let info: &'s _ = unsafe { &*info };
            Self::slow_function_impl(info);
        }
        extern "C" fn v8_fn_ptr_metrics<'s>(
            info: *const deno_core::v8::FunctionCallbackInfo,
        ) {
            let info: &'s _ = unsafe { &*info };
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data())
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_slow(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::slow_function_impl(info);
            if res == 0 {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Completed,
                );
            } else {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Error,
                );
            }
        }
    }
    impl op_smi_unsigned_return {
        #[inline(always)]
        fn call(a: Int16, b: Int32, c: Uint16, d: Uint32) -> Uint32 {
            a as Uint32 + b as Uint32 + c as Uint32 + d as Uint32
        }
    }
    <op_smi_unsigned_return as ::deno_core::_ops::Op>::DECL
}

#[allow(non_camel_case_types)]
const fn op_smi_signed_return() -> ::deno_core::_ops::OpDecl {
    #[allow(non_camel_case_types)]
    struct op_smi_signed_return {
        _unconstructable: ::std::marker::PhantomData<()>,
    }
    impl ::deno_core::_ops::Op for op_smi_signed_return {
        const NAME: &'static str = stringify!(op_smi_signed_return);
        const DECL: ::deno_core::_ops::OpDecl = ::deno_core::_ops::OpDecl::new_internal_op2(
            ::deno_core::__op_name_fast!(op_smi_signed_return),
            false,
            false,
            4usize as u8,
            Self::v8_fn_ptr as _,
            Self::v8_fn_ptr_metrics as _,
            Some({
                use deno_core::v8::fast_api::Type;
                use deno_core::v8::fast_api::CType;
                deno_core::v8::fast_api::FastFunction::new_with_bigint(
                    &[Type::V8Value, Type::Int32, Type::Int32, Type::Int32, Type::Int32],
                    CType::Int32,
                    Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
                )
            }),
            Some({
                use deno_core::v8::fast_api::Type;
                use deno_core::v8::fast_api::CType;
                deno_core::v8::fast_api::FastFunction::new_with_bigint(
                    &[
                        Type::V8Value,
                        Type::Int32,
                        Type::Int32,
                        Type::Int32,
                        Type::Int32,
                        Type::CallbackOptions,
                    ],
                    CType::Int32,
                    Self::v8_fn_ptr_fast_metrics as *const ::std::ffi::c_void,
                )
            }),
            ::deno_core::OpMetadata {
                ..::deno_core::OpMetadata::default()
            },
        );
    }
    impl op_smi_signed_return {
        pub const fn name() -> &'static str {
            stringify!(op_smi_signed_return)
        }
        #[allow(clippy::too_many_arguments)]
        extern "C" fn v8_fn_ptr_fast_metrics<'s>(
            this: deno_core::v8::Local<deno_core::v8::Object>,
            arg0: i32,
            arg1: i32,
            arg2: i32,
            arg3: i32,
            fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions<
                's,
            >,
        ) -> i32 {
            let fast_api_callback_options: &'s mut _ = unsafe {
                &mut *fast_api_callback_options
            };
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<
                    deno_core::v8::External,
                >::cast(unsafe { fast_api_callback_options.data.data })
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_fast(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::v8_fn_ptr_fast(this, arg0, arg1, arg2, arg3);
            deno_core::_ops::dispatch_metrics_fast(
                opctx,
                deno_core::_ops::OpMetricsEvent::Completed,
            );
            res
        }
        #[allow(clippy::too_many_arguments)]
        extern "C" fn v8_fn_ptr_fast<'s>(
            this: deno_core::v8::Local<deno_core::v8::Object>,
            arg0: i32,
            arg1: i32,
            arg2: i32,
            arg3: i32,
        ) -> i32 {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let result = {
                let arg0 = arg0 as _;
                let arg1 = arg1 as _;
                let arg2 = arg2 as _;
                let arg3 = arg3 as _;
                Self::call(arg0, arg1, arg2, arg3)
            };
            result as _
        }
        #[inline(always)]
        fn slow_function_impl<'s>(
            info: &'s deno_core::v8::FunctionCallbackInfo,
        ) -> usize {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let result = {
                let arg0 = args.get(0usize as i32);
                let Some(arg0) = deno_core::_ops::to_i32_option(&arg0) else {
                    let mut scope = unsafe { deno_core::v8::CallbackScope::new(info) };
                    let msg = deno_core::v8::String::new_from_one_byte(
                            &mut scope,
                            "expected i32".as_bytes(),
                            deno_core::v8::NewStringType::Normal,
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return 1;
                };
                let arg0 = arg0 as _;
                let arg1 = args.get(1usize as i32);
                let Some(arg1) = deno_core::_ops::to_i32_option(&arg1) else {
                    let mut scope = unsafe { deno_core::v8::CallbackScope::new(info) };
                    let msg = deno_core::v8::String::new_from_one_byte(
                            &mut scope,
                            "expected i32".as_bytes(),
                            deno_core::v8::NewStringType::Normal,
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return 1;
                };
                let arg1 = arg1 as _;
                let arg2 = args.get(2usize as i32);
                let Some(arg2) = deno_core::_ops::to_i32_option(&arg2) else {
                    let mut scope = unsafe { deno_core::v8::CallbackScope::new(info) };
                    let msg = deno_core::v8::String::new_from_one_byte(
                            &mut scope,
                            "expected i32".as_bytes(),
                            deno_core::v8::NewStringType::Normal,
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return 1;
                };
                let arg2 = arg2 as _;
                let arg3 = args.get(3usize as i32);
                let Some(arg3) = deno_core::_ops::to_i32_option(&arg3) else {
                    let mut scope = unsafe { deno_core::v8::CallbackScope::new(info) };
                    let msg = deno_core::v8::String::new_from_one_byte(
                            &mut scope,
                            "expected i32".as_bytes(),
                            deno_core::v8::NewStringType::Normal,
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return 1;
                };
                let arg3 = arg3 as _;
                Self::call(arg0, arg1, arg2, arg3)
            };
            deno_core::_ops::RustToV8RetVal::to_v8_rv(
                deno_core::_ops::RustToV8Marker::<
                    deno_core::_ops::SmiMarker,
                    _,
                >::from(result),
                &mut rv,
            );
            return 0;
        }
        extern "C" fn v8_fn_ptr<'s>(info: *const deno_core::v8::FunctionCallbackInfo) {
            let info: &'s _ = unsafe { &*info };
            Self::slow_function_impl(info);
        }
        extern "C" fn v8_fn_ptr_metrics<'s>(
            info: *const deno_core::v8::FunctionCallbackInfo,
        ) {
            let info: &'s _ = unsafe { &*info };
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data())
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_slow(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::slow_function_impl(info);
            if res == 0 {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Completed,
                );
            } else {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Error,
                );
            }
        }
    }
    impl op_smi_signed_return {
        #[inline(always)]
        fn call(a: Int16, b: Int32, c: Uint16, d: Uint32) -> Int32 {
            a as Int32 + b as Int32 + c as Int32 + d as Int32
        }
    }
    <op_smi_signed_return as ::deno_core::_ops::Op>::DECL
}

#[allow(non_camel_case_types)]
const fn op_smi_option() -> ::deno_core::_ops::OpDecl {
    #[allow(non_camel_case_types)]
    struct op_smi_option {
        _unconstructable: ::std::marker::PhantomData<()>,
    }
    impl ::deno_core::_ops::Op for op_smi_option {
        const NAME: &'static str = stringify!(op_smi_option);
        const DECL: ::deno_core::_ops::OpDecl = ::deno_core::_ops::OpDecl::new_internal_op2(
            ::deno_core::__op_name_fast!(op_smi_option),
            false,
            false,
            1usize as u8,
            Self::v8_fn_ptr as _,
            Self::v8_fn_ptr_metrics as _,
            None,
            None,
            ::deno_core::OpMetadata {
                ..::deno_core::OpMetadata::default()
            },
        );
    }
    impl op_smi_option {
        pub const fn name() -> &'static str {
            stringify!(op_smi_option)
        }
        #[inline(always)]
        fn slow_function_impl<'s>(
            info: &'s deno_core::v8::FunctionCallbackInfo,
        ) -> usize {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let result = {
                let arg0 = args.get(0usize as i32);
                let arg0 = if arg0.is_null_or_undefined() {
                    None
                } else {
                    let Some(arg0) = deno_core::_ops::to_i32_option(&arg0) else {
                        let mut scope = unsafe {
                            deno_core::v8::CallbackScope::new(info)
                        };
                        let msg = deno_core::v8::String::new_from_one_byte(
                                &mut scope,
                                "expected i32".as_bytes(),
                                deno_core::v8::NewStringType::Normal,
                            )
                            .unwrap();
                        let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                        scope.throw_exception(exc);
                        return 1;
                    };
                    let arg0 = arg0 as _;
                    Some(arg0)
                };
                Self::call(arg0)
            };
            deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv);
            return 0;
        }
        extern "C" fn v8_fn_ptr<'s>(info: *const deno_core::v8::FunctionCallbackInfo) {
            let info: &'s _ = unsafe { &*info };
            Self::slow_function_impl(info);
        }
        extern "C" fn v8_fn_ptr_metrics<'s>(
            info: *const deno_core::v8::FunctionCallbackInfo,
        ) {
            let info: &'s _ = unsafe { &*info };
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data())
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_slow(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::slow_function_impl(info);
            if res == 0 {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Completed,
                );
            } else {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Error,
                );
            }
        }
    }
    impl op_smi_option {
        #[inline(always)]
        fn call(a: Option<Uint32>) -> Option<Uint32> {
            a
        }
    }
    <op_smi_option as ::deno_core::_ops::Op>::DECL
}
