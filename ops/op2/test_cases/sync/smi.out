#[allow(non_camel_case_types)]
struct op_add {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_add {
    const NAME: &'static str = stringify!(op_add);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_add),
        false,
        false,
        false,
        2usize as u8,
        Self::v8_fn_ptr as _,
        Some({
            use deno_core::v8::fast_api::Type;
            use deno_core::v8::fast_api::CType;
            deno_core::v8::fast_api::FastFunction::new(
                &[Type::V8Value, Type::Int32, Type::Uint32],
                CType::Uint32,
                Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
            )
        }),
    );
}
impl op_add {
    pub const fn name() -> &'static str {
        stringify!(op_add)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    fn v8_fn_ptr_fast(
        _: deno_core::v8::Local<deno_core::v8::Object>,
        arg0: i32,
        arg1: u32,
    ) -> u32 {
        let arg0 = arg0 as _;
        let arg1 = arg1 as _;
        let result = Self::call(arg0, arg1);
        result
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let arg0 = args.get(0usize as i32);
        let arg0 = deno_core::_ops::to_i32(&arg0) as _;
        let arg1 = args.get(1usize as i32);
        let arg1 = deno_core::_ops::to_u32(&arg1) as _;
        let result = Self::call(arg0, arg1);
        rv.set_uint32(result as u32);
    }
    #[inline(always)]
    fn call(id: ResourceId, extra: u16) -> u32 {}
}
