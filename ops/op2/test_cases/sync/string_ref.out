#[allow(non_camel_case_types)]
struct op_string_owned {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_string_owned {
    const NAME: &'static str = stringify!(op_string_owned);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_string_owned),
        false,
        false,
        false,
        1usize as u8,
        Self::v8_fn_ptr as _,
        Some({
            use deno_core::v8::fast_api::Type;
            use deno_core::v8::fast_api::CType;
            deno_core::v8::fast_api::FastFunction::new(
                &[Type::V8Value, Type::SeqOneByteString],
                CType::Uint32,
                Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
            )
        }),
    );
}
impl op_string_owned {
    pub const fn name() -> &'static str {
        stringify!(op_string_owned)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    fn v8_fn_ptr_fast(
        _: deno_core::v8::Local<deno_core::v8::Object>,
        arg0: *mut deno_core::v8::fast_api::FastApiOneByteString,
    ) -> u32 {
        let mut arg0_temp: [::std::mem::MaybeUninit<u8>; 1024] = [::std::mem::MaybeUninit::uninit(); 1024];
        let arg0 = &deno_core::_ops::to_str_ptr(unsafe { &mut *arg0 }, &mut arg0_temp);
        let result = Self::call(arg0);
        result
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let arg0 = args.get(0usize as i32);
        let mut arg0_temp: [::std::mem::MaybeUninit<u8>; 1024] = [::std::mem::MaybeUninit::uninit(); 1024];
        let arg0 = &deno_core::_ops::to_str(&mut scope, &arg0, &mut arg0_temp);
        let result = Self::call(arg0);
        rv.set_uint32(result as u32);
    }
    #[inline(always)]
    fn call(s: &str) -> u32 {
        s.len() as _
    }
}
