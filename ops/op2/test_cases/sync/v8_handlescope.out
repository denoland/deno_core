#[allow(non_camel_case_types)]
struct op_handlescope {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_handlescope {
    const NAME: &'static str = stringify!(op_handlescope);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl {
        name: stringify!(op_handlescope),
        v8_fn_ptr: Self::v8_fn_ptr as _,
        enabled: true,
        fast_fn: None,
        is_async: false,
        is_unstable: false,
        is_v8: false,
        arg_count: 2usize as u8,
    };
}
impl op_handlescope {
    pub const fn name() -> &'static str {
        stringify!(op_handlescope)
    }
    pub const fn decl() -> deno_core::_ops::OpDecl {
        deno_core::_ops::OpDecl {
            name: stringify!(op_handlescope),
            v8_fn_ptr: Self::v8_fn_ptr as _,
            enabled: true,
            fast_fn: None,
            is_async: false,
            is_unstable: false,
            is_v8: false,
            arg_count: 2usize as u8,
        }
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let arg1 = args.get(0usize as i32);
        let Ok(mut arg1) = deno_core::_ops::v8_try_convert::<
            deno_core::v8::String,
        >(arg1) else {
        let msg = deno_core::v8::String::new_from_one_byte(
                &mut scope,
                "expected String".as_bytes(),
                deno_core::v8::NewStringType::Normal,
            )
            .unwrap();
        let exc = deno_core::v8::Exception::error(&mut scope, msg);
        scope.throw_exception(exc);
        return;
    };
        let arg1 = arg1;
        let arg0 = &mut scope;
        let result = Self::call(arg0, arg1);
        rv.set(result.into())
    }
    #[inline(always)]
    fn call(
        scope: &v8::HandleScope,
        str2: v8::Local<v8::String>,
    ) -> v8::Local<v8::String> {}
}
