#[allow(non_camel_case_types)]
struct op_handlescope {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl ::deno_core::_ops::Op for op_handlescope {
    const NAME: &'static str = stringify!(op_handlescope);
    const DECL: ::deno_core::_ops::OpDecl = ::deno_core::_ops::OpDecl::new_internal_op2(
        ::deno_core::__op_name_fast!(op_handlescope),
        false,
        false,
        2usize as u8,
        Self::v8_fn_ptr as _,
        Self::v8_fn_ptr_metrics as _,
        None,
        None,
    );
}
impl op_handlescope {
    pub const fn name() -> &'static str {
        stringify!(op_handlescope)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    #[inline(always)]
    fn slow_function_impl(info: *const deno_core::v8::FunctionCallbackInfo) -> usize {
        #[cfg(debug_assertions)]
        let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
            &<Self as deno_core::_ops::Op>::DECL,
        );
        let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let result = {
            let arg1 = args.get(0usize as i32);
            let Ok(mut arg1) = deno_core::_ops::v8_try_convert::<
                deno_core::v8::String,
            >(arg1) else {
                let msg = deno_core::v8::String::new_from_one_byte(
                        &mut scope,
                        "expected String".as_bytes(),
                        deno_core::v8::NewStringType::Normal,
                    )
                    .unwrap();
                let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                scope.throw_exception(exc);
                return 1;
            };
            let arg1 = arg1;
            let arg0 = &mut scope;
            Self::call(arg0, arg1)
        };
        rv.set(deno_core::_ops::RustToV8NoScope::to_v8(result));
        return 0;
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        Self::slow_function_impl(info);
    }
    extern "C" fn v8_fn_ptr_metrics(info: *const deno_core::v8::FunctionCallbackInfo) {
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let opctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        deno_core::_ops::dispatch_metrics_slow(
            &opctx,
            deno_core::_ops::OpMetricsEvent::Dispatched,
        );
        let res = Self::slow_function_impl(info);
        if res == 0 {
            deno_core::_ops::dispatch_metrics_slow(
                &opctx,
                deno_core::_ops::OpMetricsEvent::Completed,
            );
        } else {
            deno_core::_ops::dispatch_metrics_slow(
                &opctx,
                deno_core::_ops::OpMetricsEvent::Error,
            );
        }
    }
    #[inline(always)]
    fn call<'a>(
        _scope: &v8::HandleScope<'a>,
        _str2: v8::Local<v8::String>,
    ) -> v8::Local<'a, v8::String> {
        unimplemented!()
    }
}
