#[allow(non_camel_case_types)]
const fn op_buffers() -> ::deno_core::_ops::OpDecl {
    #[allow(non_camel_case_types)]
    struct op_buffers {
        _unconstructable: ::std::marker::PhantomData<()>,
    }
    impl ::deno_core::_ops::Op for op_buffers {
        const NAME: &'static str = stringify!(op_buffers);
        const DECL: ::deno_core::_ops::OpDecl = ::deno_core::_ops::OpDecl::new_internal_op2(
            ::deno_core::__op_name_fast!(op_buffers),
            false,
            false,
            1usize as u8,
            Self::v8_fn_ptr as _,
            Self::v8_fn_ptr_metrics as _,
            None,
            None,
            ::deno_core::OpMetadata {
                ..::deno_core::OpMetadata::default()
            },
        );
    }
    impl op_buffers {
        pub const fn name() -> &'static str {
            stringify!(op_buffers)
        }
        #[inline(always)]
        fn slow_function_impl<'s>(
            info: &'s deno_core::v8::FunctionCallbackInfo,
        ) -> usize {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let mut scope = unsafe { deno_core::v8::CallbackScope::new(info) };
            let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let result = {
                let arg0 = args.get(0usize as i32);
                let mut arg0_temp;
                arg0_temp = match unsafe { deno_core::_ops::to_v8_slice::<u8>(arg0) } {
                    Ok(arg0) => arg0,
                    Err(arg0_err) => {
                        let mut scope = unsafe {
                            deno_core::v8::CallbackScope::new(info)
                        };
                        let msg = deno_core::v8::String::new_from_one_byte(
                                &mut scope,
                                arg0_err.as_bytes(),
                                deno_core::v8::NewStringType::Normal,
                            )
                            .unwrap();
                        let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                        scope.throw_exception(exc);
                        return 1;
                    }
                };
                let arg0 = deno_core::serde_v8::JsBuffer::from_parts(arg0_temp);
                Self::call(arg0)
            };
            match deno_core::_ops::RustToV8Fallible::to_v8_fallible(result, &mut scope) {
                Ok(v) => rv.set(v),
                Err(rv_err) => {
                    let msg = deno_core::v8::String::new(
                            &mut scope,
                            &format!("{}", deno_core::anyhow::Error::from(rv_err)),
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return 1;
                }
            };
            return 0;
        }
        extern "C" fn v8_fn_ptr<'s>(info: *const deno_core::v8::FunctionCallbackInfo) {
            let info: &'s _ = unsafe { &*info };
            Self::slow_function_impl(info);
        }
        extern "C" fn v8_fn_ptr_metrics<'s>(
            info: *const deno_core::v8::FunctionCallbackInfo,
        ) {
            let info: &'s _ = unsafe { &*info };
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data())
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_slow(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::slow_function_impl(info);
            if res == 0 {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Completed,
                );
            } else {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Error,
                );
            }
        }
    }
    impl op_buffers {
        #[inline(always)]
        fn call(buffer: JsBuffer) -> JsBuffer {
            buffer
        }
    }
    <op_buffers as ::deno_core::_ops::Op>::DECL
}

#[allow(non_camel_case_types)]
const fn op_buffers_option() -> ::deno_core::_ops::OpDecl {
    #[allow(non_camel_case_types)]
    struct op_buffers_option {
        _unconstructable: ::std::marker::PhantomData<()>,
    }
    impl ::deno_core::_ops::Op for op_buffers_option {
        const NAME: &'static str = stringify!(op_buffers_option);
        const DECL: ::deno_core::_ops::OpDecl = ::deno_core::_ops::OpDecl::new_internal_op2(
            ::deno_core::__op_name_fast!(op_buffers_option),
            false,
            false,
            1usize as u8,
            Self::v8_fn_ptr as _,
            Self::v8_fn_ptr_metrics as _,
            None,
            None,
            ::deno_core::OpMetadata {
                ..::deno_core::OpMetadata::default()
            },
        );
    }
    impl op_buffers_option {
        pub const fn name() -> &'static str {
            stringify!(op_buffers_option)
        }
        #[inline(always)]
        fn slow_function_impl<'s>(
            info: &'s deno_core::v8::FunctionCallbackInfo,
        ) -> usize {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let mut scope = unsafe { deno_core::v8::CallbackScope::new(info) };
            let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let result = {
                let arg0 = args.get(0usize as i32);
                let mut arg0_temp;
                let arg0 = if arg0.is_null_or_undefined() {
                    None
                } else {
                    arg0_temp = match unsafe {
                        deno_core::_ops::to_v8_slice::<u8>(arg0)
                    } {
                        Ok(arg0) => arg0,
                        Err(arg0_err) => {
                            let mut scope = unsafe {
                                deno_core::v8::CallbackScope::new(info)
                            };
                            let msg = deno_core::v8::String::new_from_one_byte(
                                    &mut scope,
                                    arg0_err.as_bytes(),
                                    deno_core::v8::NewStringType::Normal,
                                )
                                .unwrap();
                            let exc = deno_core::v8::Exception::type_error(
                                &mut scope,
                                msg,
                            );
                            scope.throw_exception(exc);
                            return 1;
                        }
                    };
                    let arg0 = deno_core::serde_v8::JsBuffer::from_parts(arg0_temp);
                    Some(arg0)
                };
                Self::call(arg0)
            };
            match deno_core::_ops::RustToV8Fallible::to_v8_fallible(result, &mut scope) {
                Ok(v) => rv.set(v),
                Err(rv_err) => {
                    let msg = deno_core::v8::String::new(
                            &mut scope,
                            &format!("{}", deno_core::anyhow::Error::from(rv_err)),
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return 1;
                }
            };
            return 0;
        }
        extern "C" fn v8_fn_ptr<'s>(info: *const deno_core::v8::FunctionCallbackInfo) {
            let info: &'s _ = unsafe { &*info };
            Self::slow_function_impl(info);
        }
        extern "C" fn v8_fn_ptr_metrics<'s>(
            info: *const deno_core::v8::FunctionCallbackInfo,
        ) {
            let info: &'s _ = unsafe { &*info };
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data())
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_slow(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::slow_function_impl(info);
            if res == 0 {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Completed,
                );
            } else {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Error,
                );
            }
        }
    }
    impl op_buffers_option {
        #[inline(always)]
        fn call(buffer: Option<JsBuffer>) -> Option<JsBuffer> {
            buffer
        }
    }
    <op_buffers_option as ::deno_core::_ops::Op>::DECL
}

#[allow(non_camel_case_types)]
const fn op_arraybuffers() -> ::deno_core::_ops::OpDecl {
    #[allow(non_camel_case_types)]
    struct op_arraybuffers {
        _unconstructable: ::std::marker::PhantomData<()>,
    }
    impl ::deno_core::_ops::Op for op_arraybuffers {
        const NAME: &'static str = stringify!(op_arraybuffers);
        const DECL: ::deno_core::_ops::OpDecl = ::deno_core::_ops::OpDecl::new_internal_op2(
            ::deno_core::__op_name_fast!(op_arraybuffers),
            false,
            false,
            1usize as u8,
            Self::v8_fn_ptr as _,
            Self::v8_fn_ptr_metrics as _,
            None,
            None,
            ::deno_core::OpMetadata {
                ..::deno_core::OpMetadata::default()
            },
        );
    }
    impl op_arraybuffers {
        pub const fn name() -> &'static str {
            stringify!(op_arraybuffers)
        }
        #[inline(always)]
        fn slow_function_impl<'s>(
            info: &'s deno_core::v8::FunctionCallbackInfo,
        ) -> usize {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let mut scope = unsafe { deno_core::v8::CallbackScope::new(info) };
            let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let result = {
                let arg0 = args.get(0usize as i32);
                let mut arg0_temp;
                arg0_temp = match unsafe { deno_core::_ops::to_v8_slice_buffer(arg0) } {
                    Ok(arg0) => arg0,
                    Err(arg0_err) => {
                        let mut scope = unsafe {
                            deno_core::v8::CallbackScope::new(info)
                        };
                        let msg = deno_core::v8::String::new_from_one_byte(
                                &mut scope,
                                arg0_err.as_bytes(),
                                deno_core::v8::NewStringType::Normal,
                            )
                            .unwrap();
                        let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                        scope.throw_exception(exc);
                        return 1;
                    }
                };
                let arg0 = deno_core::serde_v8::JsBuffer::from_parts(arg0_temp);
                Self::call(arg0)
            };
            rv.set(
                deno_core::_ops::RustToV8::to_v8(
                    deno_core::_ops::RustToV8Marker::<
                        deno_core::_ops::ArrayBufferMarker,
                        _,
                    >::from(result),
                    &mut scope,
                ),
            );
            return 0;
        }
        extern "C" fn v8_fn_ptr<'s>(info: *const deno_core::v8::FunctionCallbackInfo) {
            let info: &'s _ = unsafe { &*info };
            Self::slow_function_impl(info);
        }
        extern "C" fn v8_fn_ptr_metrics<'s>(
            info: *const deno_core::v8::FunctionCallbackInfo,
        ) {
            let info: &'s _ = unsafe { &*info };
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data())
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_slow(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::slow_function_impl(info);
            if res == 0 {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Completed,
                );
            } else {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Error,
                );
            }
        }
    }
    impl op_arraybuffers {
        #[inline(always)]
        fn call(buffer: JsBuffer) -> JsBuffer {
            buffer
        }
    }
    <op_arraybuffers as ::deno_core::_ops::Op>::DECL
}
