#[allow(non_camel_case_types)]
pub struct op_string_return {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_string_return {
    const NAME: &'static str = stringify!(op_string_return);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_string_return),
        false,
        false,
        false,
        0usize as u8,
        Self::v8_fn_ptr as _,
        None,
    );
}
impl op_string_return {
    pub const fn name() -> &'static str {
        stringify!(op_string_return)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let result = { Self::call() };
        match deno_core::_ops::RustToV8Fallible::to_v8_fallible(result, &mut scope) {
            Ok(v) => rv.set(v),
            Err(rv_err) => {
                let msg = deno_core::v8::String::new(
                        &mut scope,
                        &format!("{}", deno_core::anyhow::Error::from(rv_err)),
                    )
                    .unwrap();
                let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                scope.throw_exception(exc);
                return;
            }
        }
    }
    #[inline(always)]
    pub fn call() -> String {
        "".into()
    }
}

#[allow(non_camel_case_types)]
pub struct op_string_return_ref {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_string_return_ref {
    const NAME: &'static str = stringify!(op_string_return_ref);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_string_return_ref),
        false,
        false,
        false,
        0usize as u8,
        Self::v8_fn_ptr as _,
        None,
    );
}
impl op_string_return_ref {
    pub const fn name() -> &'static str {
        stringify!(op_string_return_ref)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let result = { Self::call() };
        match deno_core::_ops::RustToV8Fallible::to_v8_fallible(result, &mut scope) {
            Ok(v) => rv.set(v),
            Err(rv_err) => {
                let msg = deno_core::v8::String::new(
                        &mut scope,
                        &format!("{}", deno_core::anyhow::Error::from(rv_err)),
                    )
                    .unwrap();
                let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                scope.throw_exception(exc);
                return;
            }
        }
    }
    #[inline(always)]
    pub fn call() -> &'static str {
        ""
    }
}

#[allow(non_camel_case_types)]
pub struct op_string_return_cow {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_string_return_cow {
    const NAME: &'static str = stringify!(op_string_return_cow);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_string_return_cow),
        false,
        false,
        false,
        0usize as u8,
        Self::v8_fn_ptr as _,
        None,
    );
}
impl op_string_return_cow {
    pub const fn name() -> &'static str {
        stringify!(op_string_return_cow)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let result = { Self::call() };
        match deno_core::_ops::RustToV8Fallible::to_v8_fallible(result, &mut scope) {
            Ok(v) => rv.set(v),
            Err(rv_err) => {
                let msg = deno_core::v8::String::new(
                        &mut scope,
                        &format!("{}", deno_core::anyhow::Error::from(rv_err)),
                    )
                    .unwrap();
                let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                scope.throw_exception(exc);
                return;
            }
        }
    }
    #[inline(always)]
    pub fn call<'a>() -> Cow<'a, str> {
        "".into()
    }
}
