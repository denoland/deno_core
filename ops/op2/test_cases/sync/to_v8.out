#[allow(non_camel_case_types)]
pub const fn op_to_v8_return() -> ::deno_core::_ops::OpDecl {
    #[allow(non_camel_case_types)]
    pub struct op_to_v8_return {
        _unconstructable: ::std::marker::PhantomData<()>,
    }
    impl ::deno_core::_ops::Op for op_to_v8_return {
        const NAME: &'static str = stringify!(op_to_v8_return);
        const DECL: ::deno_core::_ops::OpDecl = ::deno_core::_ops::OpDecl::new_internal_op2(
            ::deno_core::__op_name_fast!(op_to_v8_return),
            false,
            false,
            0usize as u8,
            Self::v8_fn_ptr as _,
            Self::v8_fn_ptr_metrics as _,
            None,
            None,
            ::deno_core::OpMetadata {
                ..::deno_core::OpMetadata::default()
            },
        );
    }
    impl op_to_v8_return {
        pub const fn name() -> &'static str {
            stringify!(op_to_v8_return)
        }
        #[inline(always)]
        fn slow_function_impl<'s>(
            info: &'s deno_core::v8::FunctionCallbackInfo,
        ) -> usize {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let mut scope = unsafe { deno_core::v8::CallbackScope::new(info) };
            let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
            let result = { Self::call() };
            match deno_core::_ops::RustToV8Fallible::to_v8_fallible(
                deno_core::_ops::RustToV8Marker::<
                    deno_core::_ops::ToV8Marker,
                    _,
                >::from(result),
                &mut scope,
            ) {
                Ok(v) => rv.set(v),
                Err(rv_err) => {
                    let msg = deno_core::v8::String::new(
                            &mut scope,
                            &format!("{}", deno_core::anyhow::Error::from(rv_err)),
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return 1;
                }
            };
            return 0;
        }
        extern "C" fn v8_fn_ptr<'s>(info: *const deno_core::v8::FunctionCallbackInfo) {
            let info: &'s _ = unsafe { &*info };
            Self::slow_function_impl(info);
        }
        extern "C" fn v8_fn_ptr_metrics<'s>(
            info: *const deno_core::v8::FunctionCallbackInfo,
        ) {
            let info: &'s _ = unsafe { &*info };
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data())
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_slow(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::slow_function_impl(info);
            if res == 0 {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Completed,
                );
            } else {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Error,
                );
            }
        }
    }
    impl op_to_v8_return {
        #[inline(always)]
        pub fn call() -> Foo {
            Foo
        }
    }
    <op_to_v8_return as ::deno_core::_ops::Op>::DECL
}
