#[allow(non_camel_case_types)]
pub struct op_bool {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_bool {
    const NAME: &'static str = stringify!(op_bool);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal_op2(
        stringify!(op_bool),
        false,
        1usize as u8,
        Self::v8_fn_ptr as _,
        Self::v8_fn_ptr_metrics as _,
        Some({
            use ::deno_core::v8::fast_api::Type;
            use ::deno_core::v8::fast_api::CType;
            ::deno_core::v8::fast_api::FastFunction::new_with_bigint(
                &[Type::V8Value, Type::Bool, Type::CallbackOptions],
                CType::Bool,
                Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
            )
        }),
        Some({
            use ::deno_core::v8::fast_api::Type;
            use ::deno_core::v8::fast_api::CType;
            ::deno_core::v8::fast_api::FastFunction::new_with_bigint(
                &[Type::V8Value, Type::Bool, Type::CallbackOptions],
                CType::Bool,
                Self::v8_fn_ptr_fast_metrics as *const ::std::ffi::c_void,
            )
        }),
    );
}
impl op_bool {
    pub const fn name() -> &'static str {
        stringify!(op_bool)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    #[allow(clippy::too_many_arguments)]
    fn v8_fn_ptr_fast_metrics(
        this: ::deno_core::v8::Local<::deno_core::v8::Object>,
        arg0: bool,
        fast_api_callback_options: *mut ::deno_core::v8::fast_api::FastApiCallbackOptions,
    ) -> bool {
        let fast_api_callback_options = unsafe { &mut *fast_api_callback_options };
        let opctx = unsafe {
            &*(::deno_core::v8::Local::<
                ::deno_core::v8::External,
            >::cast(unsafe { fast_api_callback_options.data.data })
                .value() as *const ::deno_core::_ops::OpCtx)
        };
        ::deno_core::_ops::dispatch_metrics_fast(
            &opctx,
            ::deno_core::_ops::OpMetricsEvent::Dispatched,
        );
        let res = Self::v8_fn_ptr_fast(this, arg0, fast_api_callback_options);
        ::deno_core::_ops::dispatch_metrics_fast(
            &opctx,
            ::deno_core::_ops::OpMetricsEvent::Completed,
        );
        res
    }
    #[allow(clippy::too_many_arguments)]
    fn v8_fn_ptr_fast(
        _: ::deno_core::v8::Local<::deno_core::v8::Object>,
        arg0: bool,
        fast_api_callback_options: *mut ::deno_core::v8::fast_api::FastApiCallbackOptions,
    ) -> bool {
        let fast_api_callback_options = unsafe { &mut *fast_api_callback_options };
        let opctx = unsafe {
            &*(::deno_core::v8::Local::<
                ::deno_core::v8::External,
            >::cast(unsafe { fast_api_callback_options.data.data })
                .value() as *const ::deno_core::_ops::OpCtx)
        };
        let result = {
            let arg0 = arg0 as _;
            Self::call(arg0)
        };
        let result = match result {
            Ok(result) => result,
            Err(err) => {
                unsafe {
                    opctx.unsafely_set_last_error_for_ops_only(err);
                }
                fast_api_callback_options.fallback = true;
                return unsafe { std::mem::zeroed() };
            }
        };
        result as _
    }
    extern "C" fn v8_fn_ptr(info: *const ::deno_core::v8::FunctionCallbackInfo) {
        let mut rv = ::deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let args = ::deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let opctx = unsafe {
            &*(::deno_core::v8::Local::<::deno_core::v8::External>::cast(args.data())
                .value() as *const ::deno_core::_ops::OpCtx)
        };
        if let Some(err) = unsafe { opctx.unsafely_take_last_error_for_ops_only() } {
            let mut scope = unsafe { ::deno_core::v8::CallbackScope::new(&*info) };
            let err = err.into();
            let exception = ::deno_core::error::to_v8_error(
                &mut scope,
                opctx.get_error_class_fn,
                &err,
            );
            scope.throw_exception(exception);
            return;
        }
        let result = {
            let arg0 = args.get(0usize as i32);
            let arg0 = arg0.is_true();
            Self::call(arg0)
        };
        match result {
            Ok(result) => ::deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv),
            Err(err) => {
                let mut scope = unsafe { ::deno_core::v8::CallbackScope::new(&*info) };
                let err = err.into();
                let exception = ::deno_core::error::to_v8_error(
                    &mut scope,
                    opctx.get_error_class_fn,
                    &err,
                );
                scope.throw_exception(exception);
                return;
            }
        };
    }
    extern "C" fn v8_fn_ptr_metrics(info: *const ::deno_core::v8::FunctionCallbackInfo) {
        let args = ::deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let opctx = unsafe {
            &*(::deno_core::v8::Local::<::deno_core::v8::External>::cast(args.data())
                .value() as *const ::deno_core::_ops::OpCtx)
        };
        ::deno_core::_ops::dispatch_metrics_slow(
            &opctx,
            ::deno_core::_ops::OpMetricsEvent::Dispatched,
        );
        Self::v8_fn_ptr(info);
        ::deno_core::_ops::dispatch_metrics_slow(
            &opctx,
            ::deno_core::_ops::OpMetricsEvent::Completed,
        );
    }
    #[inline(always)]
    pub fn call(arg: bool) -> Result<bool, AnyError> {
        Ok(arg)
    }
}
