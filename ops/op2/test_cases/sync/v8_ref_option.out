#[allow(non_camel_case_types)]
pub struct op_v8_lifetime {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_v8_lifetime {
    const NAME: &'static str = stringify!(op_v8_lifetime);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_v8_lifetime),
        false,
        false,
        false,
        2usize as u8,
        Self::v8_fn_ptr as _,
        Some({
            use deno_core::v8::fast_api::Type;
            use deno_core::v8::fast_api::CType;
            deno_core::v8::fast_api::FastFunction::new(
                &[Type::V8Value, Type::V8Value, Type::V8Value, Type::CallbackOptions],
                CType::Void,
                Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
            )
        }),
    );
}
impl op_v8_lifetime {
    pub const fn name() -> &'static str {
        stringify!(op_v8_lifetime)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    fn v8_fn_ptr_fast(
        _: deno_core::v8::Local<deno_core::v8::Object>,
        arg0: deno_core::v8::Local<deno_core::v8::Value>,
        arg1: deno_core::v8::Local<deno_core::v8::Value>,
        fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions,
    ) -> () {
        let fast_api_callback_options = unsafe { &mut *fast_api_callback_options };
        let Ok(mut arg0) = deno_core::_ops::v8_try_convert_option::<
            deno_core::v8::String,
        >(arg0) else { fast_api_callback_options.fallback = true;
        return ::std::default::Default::default();
    };
        let arg0 = match &arg0 {
            None => None,
            Some(v) => Some(::std::ops::Deref::deref(v)),
        };
        let Ok(mut arg1) = deno_core::_ops::v8_try_convert_option::<
            deno_core::v8::String,
        >(arg1) else { fast_api_callback_options.fallback = true;
        return ::std::default::Default::default();
    };
        let arg1 = match &arg1 {
            None => None,
            Some(v) => Some(::std::ops::Deref::deref(v)),
        };
        let result = Self::call(arg0, arg1);
        result
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let arg0 = args.get(0usize as i32);
        let Ok(mut arg0) = deno_core::_ops::v8_try_convert_option::<
            deno_core::v8::String,
        >(arg0) else {
        let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
        let msg = deno_core::v8::String::new_from_one_byte(
                &mut scope,
                "expected String".as_bytes(),
                deno_core::v8::NewStringType::Normal,
            )
            .unwrap();
        let exc = deno_core::v8::Exception::error(&mut scope, msg);
        scope.throw_exception(exc);
        return;
    };
        let arg0 = match &arg0 {
            None => None,
            Some(v) => Some(::std::ops::Deref::deref(v)),
        };
        let arg1 = args.get(1usize as i32);
        let Ok(mut arg1) = deno_core::_ops::v8_try_convert_option::<
            deno_core::v8::String,
        >(arg1) else {
        let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
        let msg = deno_core::v8::String::new_from_one_byte(
                &mut scope,
                "expected String".as_bytes(),
                deno_core::v8::NewStringType::Normal,
            )
            .unwrap();
        let exc = deno_core::v8::Exception::error(&mut scope, msg);
        scope.throw_exception(exc);
        return;
    };
        let arg1 = match &arg1 {
            None => None,
            Some(v) => Some(::std::ops::Deref::deref(v)),
        };
        let result = Self::call(arg0, arg1);
    }
    #[inline(always)]
    pub fn call<'s>(s: Option<&v8::String>, s2: Option<&v8::String>) {}
}
