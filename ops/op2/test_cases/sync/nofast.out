#[allow(non_camel_case_types)]
struct op_nofast {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_nofast {
    const NAME: &'static str = stringify!(op_nofast);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_nofast),
        false,
        false,
        false,
        2usize as u8,
        Self::v8_fn_ptr as _,
        None,
    );
}
impl op_nofast {
    pub const fn name() -> &'static str {
        stringify!(op_nofast)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let result = {
            let arg0 = args.get(0usize as i32);
            let arg0 = deno_core::_ops::to_u32(&arg0) as _;
            let arg1 = args.get(1usize as i32);
            let arg1 = deno_core::_ops::to_u32(&arg1) as _;
            Self::call(arg0, arg1)
        };
        rv.set_uint32(result as u32);
    }
    #[inline(always)]
    fn call(a: u32, b: u32) -> u32 {
        a + b
    }
}
