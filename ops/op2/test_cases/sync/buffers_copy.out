#[allow(non_camel_case_types)]
const fn op_buffers() -> ::deno_core::_ops::OpDecl {
    #[allow(non_camel_case_types)]
    struct op_buffers {
        _unconstructable: ::std::marker::PhantomData<()>,
    }
    impl ::deno_core::_ops::Op for op_buffers {
        const NAME: &'static str = stringify!(op_buffers);
        const DECL: ::deno_core::_ops::OpDecl = ::deno_core::_ops::OpDecl::new_internal_op2(
            ::deno_core::__op_name_fast!(op_buffers),
            false,
            false,
            false,
            3usize as u8,
            false,
            Self::v8_fn_ptr as _,
            Self::v8_fn_ptr_metrics as _,
            ::deno_core::AccessorType::None,
            Some({
                use deno_core::v8::fast_api::Type as CType;
                use deno_core::v8;
                deno_core::v8::fast_api::CFunction::new(
                    Self::v8_fn_ptr_fast as _,
                    &deno_core::v8::fast_api::CFunctionInfo::new(
                        CType::Void.as_info(),
                        &[
                            CType::V8Value.as_info(),
                            CType::V8Value.as_info(),
                            CType::V8Value.as_info(),
                            CType::V8Value.as_info(),
                            CType::CallbackOptions.as_info(),
                        ],
                        deno_core::v8::fast_api::Int64Representation::BigInt,
                    ),
                )
            }),
            Some({
                use deno_core::v8::fast_api::Type as CType;
                use deno_core::v8;
                deno_core::v8::fast_api::CFunction::new(
                    Self::v8_fn_ptr_fast_metrics as _,
                    &deno_core::v8::fast_api::CFunctionInfo::new(
                        CType::Void.as_info(),
                        &[
                            CType::V8Value.as_info(),
                            CType::V8Value.as_info(),
                            CType::V8Value.as_info(),
                            CType::V8Value.as_info(),
                            CType::CallbackOptions.as_info(),
                        ],
                        deno_core::v8::fast_api::Int64Representation::BigInt,
                    ),
                )
            }),
            ::deno_core::OpMetadata {
                ..::deno_core::OpMetadata::default()
            },
        );
    }
    impl op_buffers {
        pub const fn name() -> &'static str {
            <Self as deno_core::_ops::Op>::NAME
        }
        #[allow(clippy::too_many_arguments)]
        extern "C" fn v8_fn_ptr_fast_metrics<'s>(
            this: deno_core::v8::Local<deno_core::v8::Object>,
            arg0: deno_core::v8::Local<deno_core::v8::Value>,
            arg1: deno_core::v8::Local<deno_core::v8::Value>,
            arg2: deno_core::v8::Local<deno_core::v8::Value>,
            fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions<
                's,
            >,
        ) -> () {
            let fast_api_callback_options: &'s mut _ = unsafe {
                &mut *fast_api_callback_options
            };
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<
                    deno_core::v8::External,
                >::cast_unchecked(unsafe { fast_api_callback_options.data })
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_fast(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::v8_fn_ptr_fast(
                this,
                arg0,
                arg1,
                arg2,
                fast_api_callback_options,
            );
            deno_core::_ops::dispatch_metrics_fast(
                opctx,
                deno_core::_ops::OpMetricsEvent::Completed,
            );
            res
        }
        #[allow(clippy::too_many_arguments)]
        extern "C" fn v8_fn_ptr_fast<'s>(
            this: deno_core::v8::Local<deno_core::v8::Object>,
            arg0: deno_core::v8::Local<deno_core::v8::Value>,
            arg1: deno_core::v8::Local<deno_core::v8::Value>,
            arg2: deno_core::v8::Local<deno_core::v8::Value>,
            fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions<
                's,
            >,
        ) -> () {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let fast_api_callback_options: &'s mut _ = unsafe {
                &mut *fast_api_callback_options
            };
            let result = {
                let Ok(arg0) = arg0.try_cast::<deno_core::v8::ArrayBufferView>() else {
                    {
                        let mut scope = unsafe {
                            deno_core::v8::CallbackScope::new(
                                &*fast_api_callback_options,
                            )
                        };
                        deno_core::_ops::throw_error_one_byte(
                            &mut scope,
                            "expected ArrayBufferView",
                        );
                        return unsafe { std::mem::zeroed() };
                    }
                };
                let mut buffer = [0; ::deno_core::v8::TYPED_ARRAY_MAX_SIZE_IN_HEAP];
                let arg0 = unsafe {
                    let (input_ptr, input_len) = arg0
                        .get_contents_raw_parts(&mut buffer);
                    let input_ptr = if input_ptr.is_null() {
                        ::std::ptr::dangling_mut()
                    } else {
                        input_ptr
                    };
                    let slice = ::std::slice::from_raw_parts_mut::<
                        's,
                    >(input_ptr, input_len);
                    let (before, slice, after) = slice.align_to_mut();
                    debug_assert!(before.is_empty());
                    debug_assert!(after.is_empty());
                    slice
                };
                let arg0 = arg0.to_vec();
                let Ok(arg1) = arg1.try_cast::<deno_core::v8::ArrayBufferView>() else {
                    {
                        let mut scope = unsafe {
                            deno_core::v8::CallbackScope::new(
                                &*fast_api_callback_options,
                            )
                        };
                        deno_core::_ops::throw_error_one_byte(
                            &mut scope,
                            "expected ArrayBufferView",
                        );
                        return unsafe { std::mem::zeroed() };
                    }
                };
                let mut buffer = [0; ::deno_core::v8::TYPED_ARRAY_MAX_SIZE_IN_HEAP];
                let arg1 = unsafe {
                    let (input_ptr, input_len) = arg1
                        .get_contents_raw_parts(&mut buffer);
                    let input_ptr = if input_ptr.is_null() {
                        ::std::ptr::dangling_mut()
                    } else {
                        input_ptr
                    };
                    let slice = ::std::slice::from_raw_parts_mut::<
                        's,
                    >(input_ptr, input_len);
                    let (before, slice, after) = slice.align_to_mut();
                    debug_assert!(before.is_empty());
                    debug_assert!(after.is_empty());
                    slice
                };
                let arg1 = arg1.to_vec().into_boxed_slice();
                let Ok(arg2) = arg2.try_cast::<deno_core::v8::ArrayBufferView>() else {
                    {
                        let mut scope = unsafe {
                            deno_core::v8::CallbackScope::new(
                                &*fast_api_callback_options,
                            )
                        };
                        deno_core::_ops::throw_error_one_byte(
                            &mut scope,
                            "expected ArrayBufferView",
                        );
                        return unsafe { std::mem::zeroed() };
                    }
                };
                let mut buffer = [0; ::deno_core::v8::TYPED_ARRAY_MAX_SIZE_IN_HEAP];
                let arg2 = unsafe {
                    let (input_ptr, input_len) = arg2
                        .get_contents_raw_parts(&mut buffer);
                    let input_ptr = if input_ptr.is_null() {
                        ::std::ptr::dangling_mut()
                    } else {
                        input_ptr
                    };
                    let slice = ::std::slice::from_raw_parts_mut::<
                        's,
                    >(input_ptr, input_len);
                    let (before, slice, after) = slice.align_to_mut();
                    debug_assert!(before.is_empty());
                    debug_assert!(after.is_empty());
                    slice
                };
                let arg2 = arg2.to_vec().into();
                Self::call(arg0, arg1, arg2)
            };
            result as _
        }
        fn slow_function_impl<'s>(
            info: &'s deno_core::v8::FunctionCallbackInfo,
        ) -> usize {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let result = {
                let arg0 = args.get(0usize as i32);
                let mut arg0_temp;
                arg0_temp = match unsafe { deno_core::_ops::to_v8_slice::<u8>(arg0) } {
                    Ok(arg0) => arg0,
                    Err(arg0_err) => {
                        deno_core::_ops::throw_error_one_byte_info(&info, arg0_err);
                        return 1;
                    }
                };
                let arg0 = arg0_temp.to_vec();
                let arg1 = args.get(1usize as i32);
                let mut arg1_temp;
                arg1_temp = match unsafe { deno_core::_ops::to_v8_slice::<u8>(arg1) } {
                    Ok(arg1) => arg1,
                    Err(arg1_err) => {
                        deno_core::_ops::throw_error_one_byte_info(&info, arg1_err);
                        return 1;
                    }
                };
                let arg1 = arg1_temp.to_boxed_slice();
                let arg2 = args.get(2usize as i32);
                let mut arg2_temp;
                arg2_temp = match unsafe { deno_core::_ops::to_v8_slice::<u8>(arg2) } {
                    Ok(arg2) => arg2,
                    Err(arg2_err) => {
                        deno_core::_ops::throw_error_one_byte_info(&info, arg2_err);
                        return 1;
                    }
                };
                let arg2 = arg2_temp.to_vec().into();
                Self::call(arg0, arg1, arg2)
            };
            deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv);
            return 0;
        }
        extern "C" fn v8_fn_ptr<'s>(info: *const deno_core::v8::FunctionCallbackInfo) {
            let info: &'s _ = unsafe { &*info };
            Self::slow_function_impl(info);
        }
        extern "C" fn v8_fn_ptr_metrics<'s>(
            info: *const deno_core::v8::FunctionCallbackInfo,
        ) {
            let info: &'s _ = unsafe { &*info };
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<
                    deno_core::v8::External,
                >::cast_unchecked(args.data())
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_slow(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::slow_function_impl(info);
            if res == 0 {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Completed,
                );
            } else {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Error,
                );
            }
        }
    }
    impl op_buffers {
        #[allow(clippy::too_many_arguments)]
        fn call(_a: Vec<u8>, _b: Box<[u8]>, _c: bytes::Bytes) {}
    }
    <op_buffers as ::deno_core::_ops::Op>::DECL
}

#[allow(non_camel_case_types)]
const fn op_buffers_32() -> ::deno_core::_ops::OpDecl {
    #[allow(non_camel_case_types)]
    struct op_buffers_32 {
        _unconstructable: ::std::marker::PhantomData<()>,
    }
    impl ::deno_core::_ops::Op for op_buffers_32 {
        const NAME: &'static str = stringify!(op_buffers_32);
        const DECL: ::deno_core::_ops::OpDecl = ::deno_core::_ops::OpDecl::new_internal_op2(
            ::deno_core::__op_name_fast!(op_buffers_32),
            false,
            false,
            false,
            2usize as u8,
            false,
            Self::v8_fn_ptr as _,
            Self::v8_fn_ptr_metrics as _,
            ::deno_core::AccessorType::None,
            Some({
                use deno_core::v8::fast_api::Type as CType;
                use deno_core::v8;
                deno_core::v8::fast_api::CFunction::new(
                    Self::v8_fn_ptr_fast as _,
                    &deno_core::v8::fast_api::CFunctionInfo::new(
                        CType::Void.as_info(),
                        &[
                            CType::V8Value.as_info(),
                            CType::V8Value.as_info(),
                            CType::V8Value.as_info(),
                            CType::CallbackOptions.as_info(),
                        ],
                        deno_core::v8::fast_api::Int64Representation::BigInt,
                    ),
                )
            }),
            Some({
                use deno_core::v8::fast_api::Type as CType;
                use deno_core::v8;
                deno_core::v8::fast_api::CFunction::new(
                    Self::v8_fn_ptr_fast_metrics as _,
                    &deno_core::v8::fast_api::CFunctionInfo::new(
                        CType::Void.as_info(),
                        &[
                            CType::V8Value.as_info(),
                            CType::V8Value.as_info(),
                            CType::V8Value.as_info(),
                            CType::CallbackOptions.as_info(),
                        ],
                        deno_core::v8::fast_api::Int64Representation::BigInt,
                    ),
                )
            }),
            ::deno_core::OpMetadata {
                ..::deno_core::OpMetadata::default()
            },
        );
    }
    impl op_buffers_32 {
        pub const fn name() -> &'static str {
            <Self as deno_core::_ops::Op>::NAME
        }
        #[allow(clippy::too_many_arguments)]
        extern "C" fn v8_fn_ptr_fast_metrics<'s>(
            this: deno_core::v8::Local<deno_core::v8::Object>,
            arg0: deno_core::v8::Local<deno_core::v8::Value>,
            arg1: deno_core::v8::Local<deno_core::v8::Value>,
            fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions<
                's,
            >,
        ) -> () {
            let fast_api_callback_options: &'s mut _ = unsafe {
                &mut *fast_api_callback_options
            };
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<
                    deno_core::v8::External,
                >::cast_unchecked(unsafe { fast_api_callback_options.data })
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_fast(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::v8_fn_ptr_fast(this, arg0, arg1, fast_api_callback_options);
            deno_core::_ops::dispatch_metrics_fast(
                opctx,
                deno_core::_ops::OpMetricsEvent::Completed,
            );
            res
        }
        #[allow(clippy::too_many_arguments)]
        extern "C" fn v8_fn_ptr_fast<'s>(
            this: deno_core::v8::Local<deno_core::v8::Object>,
            arg0: deno_core::v8::Local<deno_core::v8::Value>,
            arg1: deno_core::v8::Local<deno_core::v8::Value>,
            fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions<
                's,
            >,
        ) -> () {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let fast_api_callback_options: &'s mut _ = unsafe {
                &mut *fast_api_callback_options
            };
            let result = {
                let Ok(arg0) = arg0.try_cast::<deno_core::v8::ArrayBufferView>() else {
                    {
                        let mut scope = unsafe {
                            deno_core::v8::CallbackScope::new(
                                &*fast_api_callback_options,
                            )
                        };
                        deno_core::_ops::throw_error_one_byte(
                            &mut scope,
                            "expected ArrayBufferView",
                        );
                        return unsafe { std::mem::zeroed() };
                    }
                };
                let mut buffer = [0; ::deno_core::v8::TYPED_ARRAY_MAX_SIZE_IN_HEAP];
                let arg0 = unsafe {
                    let (input_ptr, input_len) = arg0
                        .get_contents_raw_parts(&mut buffer);
                    let input_ptr = if input_ptr.is_null() {
                        ::std::ptr::dangling_mut()
                    } else {
                        input_ptr
                    };
                    let slice = ::std::slice::from_raw_parts_mut::<
                        's,
                    >(input_ptr, input_len);
                    let (before, slice, after) = slice.align_to_mut();
                    debug_assert!(before.is_empty());
                    debug_assert!(after.is_empty());
                    slice
                };
                let arg0 = arg0.to_vec();
                let Ok(arg1) = arg1.try_cast::<deno_core::v8::ArrayBufferView>() else {
                    {
                        let mut scope = unsafe {
                            deno_core::v8::CallbackScope::new(
                                &*fast_api_callback_options,
                            )
                        };
                        deno_core::_ops::throw_error_one_byte(
                            &mut scope,
                            "expected ArrayBufferView",
                        );
                        return unsafe { std::mem::zeroed() };
                    }
                };
                let mut buffer = [0; ::deno_core::v8::TYPED_ARRAY_MAX_SIZE_IN_HEAP];
                let arg1 = unsafe {
                    let (input_ptr, input_len) = arg1
                        .get_contents_raw_parts(&mut buffer);
                    let input_ptr = if input_ptr.is_null() {
                        ::std::ptr::dangling_mut()
                    } else {
                        input_ptr
                    };
                    let slice = ::std::slice::from_raw_parts_mut::<
                        's,
                    >(input_ptr, input_len);
                    let (before, slice, after) = slice.align_to_mut();
                    debug_assert!(before.is_empty());
                    debug_assert!(after.is_empty());
                    slice
                };
                let arg1 = arg1.to_vec().into_boxed_slice();
                Self::call(arg0, arg1)
            };
            result as _
        }
        fn slow_function_impl<'s>(
            info: &'s deno_core::v8::FunctionCallbackInfo,
        ) -> usize {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let result = {
                let arg0 = args.get(0usize as i32);
                let mut arg0_temp;
                arg0_temp = match unsafe { deno_core::_ops::to_v8_slice::<u32>(arg0) } {
                    Ok(arg0) => arg0,
                    Err(arg0_err) => {
                        deno_core::_ops::throw_error_one_byte_info(&info, arg0_err);
                        return 1;
                    }
                };
                let arg0 = arg0_temp.to_vec();
                let arg1 = args.get(1usize as i32);
                let mut arg1_temp;
                arg1_temp = match unsafe { deno_core::_ops::to_v8_slice::<u32>(arg1) } {
                    Ok(arg1) => arg1,
                    Err(arg1_err) => {
                        deno_core::_ops::throw_error_one_byte_info(&info, arg1_err);
                        return 1;
                    }
                };
                let arg1 = arg1_temp.to_boxed_slice();
                Self::call(arg0, arg1)
            };
            deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv);
            return 0;
        }
        extern "C" fn v8_fn_ptr<'s>(info: *const deno_core::v8::FunctionCallbackInfo) {
            let info: &'s _ = unsafe { &*info };
            Self::slow_function_impl(info);
        }
        extern "C" fn v8_fn_ptr_metrics<'s>(
            info: *const deno_core::v8::FunctionCallbackInfo,
        ) {
            let info: &'s _ = unsafe { &*info };
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<
                    deno_core::v8::External,
                >::cast_unchecked(args.data())
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_slow(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::slow_function_impl(info);
            if res == 0 {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Completed,
                );
            } else {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Error,
                );
            }
        }
    }
    impl op_buffers_32 {
        #[allow(clippy::too_many_arguments)]
        fn call(_a: Vec<u32>, _b: Box<[u32]>) {}
    }
    <op_buffers_32 as ::deno_core::_ops::Op>::DECL
}
