#[allow(non_camel_case_types)]
struct op_state_ref {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_state_ref {
    const NAME: &'static str = stringify!(op_state_ref);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_state_ref),
        false,
        false,
        false,
        1usize as u8,
        Self::v8_fn_ptr as _,
        Some({
            use deno_core::v8::fast_api::Type;
            use deno_core::v8::fast_api::CType;
            deno_core::v8::fast_api::FastFunction::new_with_bigint(
                &[Type::V8Value, Type::CallbackOptions],
                CType::Void,
                Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
            )
        }),
    );
}
impl op_state_ref {
    pub const fn name() -> &'static str {
        stringify!(op_state_ref)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    fn v8_fn_ptr_fast(
        _: deno_core::v8::Local<deno_core::v8::Object>,
        fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions,
    ) -> () {
        let fast_api_callback_options = unsafe { &mut *fast_api_callback_options };
        let opctx = unsafe {
            &*(deno_core::v8::Local::<
                deno_core::v8::External,
            >::cast(unsafe { fast_api_callback_options.data.data })
                .value() as *const deno_core::_ops::OpCtx)
        };
        let result = {
            let arg0 = &::std::cell::RefCell::borrow(&opctx.state);
            Self::call(arg0)
        };
        result as _
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let opctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        let opstate = &opctx.state;
        let result = {
            let arg0 = &::std::cell::RefCell::borrow(&opstate);
            Self::call(arg0)
        };
        deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv)
    }
    #[inline(always)]
    fn call(_state: &OpState) {}
}

#[allow(non_camel_case_types)]
struct op_state_mut {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_state_mut {
    const NAME: &'static str = stringify!(op_state_mut);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_state_mut),
        false,
        false,
        false,
        1usize as u8,
        Self::v8_fn_ptr as _,
        Some({
            use deno_core::v8::fast_api::Type;
            use deno_core::v8::fast_api::CType;
            deno_core::v8::fast_api::FastFunction::new_with_bigint(
                &[Type::V8Value, Type::CallbackOptions],
                CType::Void,
                Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
            )
        }),
    );
}
impl op_state_mut {
    pub const fn name() -> &'static str {
        stringify!(op_state_mut)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    fn v8_fn_ptr_fast(
        _: deno_core::v8::Local<deno_core::v8::Object>,
        fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions,
    ) -> () {
        let fast_api_callback_options = unsafe { &mut *fast_api_callback_options };
        let opctx = unsafe {
            &*(deno_core::v8::Local::<
                deno_core::v8::External,
            >::cast(unsafe { fast_api_callback_options.data.data })
                .value() as *const deno_core::_ops::OpCtx)
        };
        let result = {
            let arg0 = &mut ::std::cell::RefCell::borrow_mut(&opctx.state);
            Self::call(arg0)
        };
        result as _
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let opctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        let opstate = &opctx.state;
        let result = {
            let arg0 = &mut ::std::cell::RefCell::borrow_mut(&opstate);
            Self::call(arg0)
        };
        deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv)
    }
    #[inline(always)]
    fn call(_state: &mut OpState) {}
}

#[allow(non_camel_case_types)]
struct op_state_and_v8 {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_state_and_v8 {
    const NAME: &'static str = stringify!(op_state_and_v8);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_state_and_v8),
        false,
        false,
        false,
        2usize as u8,
        Self::v8_fn_ptr as _,
        None,
    );
}
impl op_state_and_v8 {
    pub const fn name() -> &'static str {
        stringify!(op_state_and_v8)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let opctx = unsafe {
            &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data()).value()
                as *const deno_core::_ops::OpCtx)
        };
        let mut scope = unsafe { &mut *opctx.isolate };
        let opstate = &opctx.state;
        let result = {
            let arg1 = args.get(0usize as i32);
            let Ok(mut arg1) = deno_core::_ops::v8_try_convert::<
                deno_core::v8::Function,
            >(arg1) else {
                let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
                let msg = deno_core::v8::String::new_from_one_byte(
                        &mut scope,
                        "expected Function".as_bytes(),
                        deno_core::v8::NewStringType::Normal,
                    )
                    .unwrap();
                let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                scope.throw_exception(exc);
                return;
            };
            let arg1 = deno_core::v8::Global::new(&mut scope, arg1);
            let arg0 = &mut ::std::cell::RefCell::borrow_mut(&opstate);
            Self::call(arg0, arg1)
        };
        deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv)
    }
    #[inline(always)]
    fn call(_state: &mut OpState, _callback: v8::Global<v8::Function>) {}
}
