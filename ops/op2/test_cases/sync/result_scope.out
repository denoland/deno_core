#[allow(non_camel_case_types)]
pub const fn op_void_with_result() -> ::deno_core::_ops::OpDecl {
    #[allow(non_camel_case_types)]
    pub struct op_void_with_result {
        _unconstructable: ::std::marker::PhantomData<()>,
    }
    impl ::deno_core::_ops::Op for op_void_with_result {
        const NAME: &'static str = stringify!(op_void_with_result);
        const DECL: ::deno_core::_ops::OpDecl = ::deno_core::_ops::OpDecl::new_internal_op2(
            ::deno_core::__op_name_fast!(op_void_with_result),
            false,
            false,
            1usize as u8,
            Self::v8_fn_ptr as _,
            Self::v8_fn_ptr_metrics as _,
            None,
            None,
            ::deno_core::OpMetadata {
                ..::deno_core::OpMetadata::default()
            },
        );
    }
    impl op_void_with_result {
        pub const fn name() -> &'static str {
            stringify!(op_void_with_result)
        }
        #[inline(always)]
        fn slow_function_impl<'s>(
            info: &'s deno_core::v8::FunctionCallbackInfo,
        ) -> usize {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let mut scope = unsafe { deno_core::v8::CallbackScope::new(info) };
            let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let result = {
                let arg0 = &mut scope;
                Self::call(arg0)
            };
            match result {
                Ok(result) => deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv),
                Err(err) => {
                    let opctx: &'s _ = unsafe {
                        &*(deno_core::v8::Local::<
                            deno_core::v8::External,
                        >::cast(args.data())
                            .value() as *const deno_core::_ops::OpCtx)
                    };
                    let err = err.into();
                    let exception = deno_core::error::to_v8_error(
                        &mut scope,
                        opctx.get_error_class_fn,
                        &err,
                    );
                    scope.throw_exception(exception);
                    return 1;
                }
            };
            return 0;
        }
        extern "C" fn v8_fn_ptr<'s>(info: *const deno_core::v8::FunctionCallbackInfo) {
            let info: &'s _ = unsafe { &*info };
            Self::slow_function_impl(info);
        }
        extern "C" fn v8_fn_ptr_metrics<'s>(
            info: *const deno_core::v8::FunctionCallbackInfo,
        ) {
            let info: &'s _ = unsafe { &*info };
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data())
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_slow(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::slow_function_impl(info);
            if res == 0 {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Completed,
                );
            } else {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Error,
                );
            }
        }
    }
    impl op_void_with_result {
        #[inline(always)]
        pub fn call(_scope: &mut v8::HandleScope) -> Result<(), AnyError> {
            Ok(())
        }
    }
    <op_void_with_result as ::deno_core::_ops::Op>::DECL
}
