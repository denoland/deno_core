#[allow(non_camel_case_types)]
/// This is a doc comment.
#[allow(clippy::some_annotation)]
pub struct op_extra_annotation {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_extra_annotation {
    const NAME: &'static str = stringify!(op_extra_annotation);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl {
        name: stringify!(op_extra_annotation),
        v8_fn_ptr: Self::v8_fn_ptr as _,
        enabled: true,
        fast_fn: Some({
            use deno_core::v8::fast_api::Type;
            use deno_core::v8::fast_api::CType;
            deno_core::v8::fast_api::FastFunction::new(
                &[Type::V8Value],
                CType::Void,
                Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
            )
        }),
        is_async: false,
        is_unstable: false,
        is_v8: false,
        arg_count: 0usize as u8,
    };
}
impl op_extra_annotation {
    pub const fn name() -> &'static str {
        stringify!(op_extra_annotation)
    }
    pub const fn decl() -> deno_core::_ops::OpDecl {
        deno_core::_ops::OpDecl {
            name: stringify!(op_extra_annotation),
            v8_fn_ptr: Self::v8_fn_ptr as _,
            enabled: true,
            fast_fn: Some({
                use deno_core::v8::fast_api::Type;
                use deno_core::v8::fast_api::CType;
                deno_core::v8::fast_api::FastFunction::new(
                    &[Type::V8Value],
                    CType::Void,
                    Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
                )
            }),
            is_async: false,
            is_unstable: false,
            is_v8: false,
            arg_count: 0usize as u8,
        }
    }
    fn v8_fn_ptr_fast(_: deno_core::v8::Local<deno_core::v8::Object>) -> () {
        let result = Self::call();
        result
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let result = Self::call();
    }
    #[inline(always)]
    /// This is a doc comment.
    #[allow(clippy::some_annotation)]
    pub fn call() -> () {}
}
