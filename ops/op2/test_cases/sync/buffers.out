#[allow(non_camel_case_types)]
struct op_buffers {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_buffers {
    const NAME: &'static str = stringify!(op_buffers);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_buffers),
        false,
        false,
        false,
        2usize as u8,
        Self::v8_fn_ptr as _,
        None,
    );
}
impl op_buffers {
    pub const fn name() -> &'static str {
        stringify!(op_buffers)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let arg0 = args.get(0usize as i32);
        let arg0 = unsafe { deno_core::_ops::to_v8_slice(&mut scope, arg0) };
        let Ok(mut arg0) = arg0 else {
        let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
        let msg = deno_core::v8::String::new_from_one_byte(
                &mut scope,
                "expected buffer".as_bytes(),
                deno_core::v8::NewStringType::Normal,
            )
            .unwrap();
        let exc = deno_core::v8::Exception::error(&mut scope, msg);
        scope.throw_exception(exc);
        return;
    };
        let arg0 = &mut arg0;
        let arg1 = args.get(1usize as i32);
        let arg1 = unsafe { deno_core::_ops::to_v8_slice(&mut scope, arg1) };
        let Ok(mut arg1) = arg1 else {
        let msg = deno_core::v8::String::new_from_one_byte(
                &mut scope,
                "expected buffer".as_bytes(),
                deno_core::v8::NewStringType::Normal,
            )
            .unwrap();
        let exc = deno_core::v8::Exception::error(&mut scope, msg);
        scope.throw_exception(exc);
        return;
    };
        let arg1 = &mut arg1;
        let result = Self::call(arg0, arg1);
    }
    #[inline(always)]
    fn call(a: &[u8], b: &mut [u8]) {}
}
