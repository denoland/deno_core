#[allow(non_camel_case_types)]
struct op_buffers {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_buffers {
    const NAME: &'static str = stringify!(op_buffers);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_buffers),
        false,
        false,
        false,
        2usize as u8,
        Self::v8_fn_ptr as _,
        Some({
            use deno_core::v8::fast_api::Type;
            use deno_core::v8::fast_api::CType;
            deno_core::v8::fast_api::FastFunction::new_with_bigint(
                &[
                    Type::V8Value,
                    Type::TypedArray(CType::Uint8),
                    Type::TypedArray(CType::Uint8),
                ],
                CType::Void,
                Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
            )
        }),
    );
}
impl op_buffers {
    pub const fn name() -> &'static str {
        stringify!(op_buffers)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    fn v8_fn_ptr_fast(
        _: deno_core::v8::Local<deno_core::v8::Object>,
        arg0: *mut deno_core::v8::fast_api::FastApiTypedArray<u8>,
        arg1: *mut deno_core::v8::fast_api::FastApiTypedArray<u8>,
    ) -> () {
        let result = {
            let arg0 = (unsafe {
                deno_core::v8::fast_api::FastApiTypedArray::get_storage_from_pointer_if_aligned(
                    arg0,
                )
            }
                .expect("Invalid buffer"));
            let arg1 = (unsafe {
                deno_core::v8::fast_api::FastApiTypedArray::get_storage_from_pointer_if_aligned(
                    arg1,
                )
            }
                .expect("Invalid buffer"));
            Self::call(arg0, arg1)
        };
        result as _
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let result = {
            let arg0 = args.get(0usize as i32);
            let mut arg0_temp;
            arg0_temp = match unsafe {
                deno_core::_ops::to_v8_slice::<u8>(&mut scope, arg0)
            } {
                Ok(arg0) => arg0,
                Err(arg0_err) => {
                    let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
                    let msg = deno_core::v8::String::new_from_one_byte(
                            &mut scope,
                            arg0_err.as_bytes(),
                            deno_core::v8::NewStringType::Normal,
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return;
                }
            };
            let arg0 = arg0_temp.as_ref();
            let arg1 = args.get(1usize as i32);
            let mut arg1_temp;
            arg1_temp = match unsafe {
                deno_core::_ops::to_v8_slice::<u8>(&mut scope, arg1)
            } {
                Ok(arg1) => arg1,
                Err(arg1_err) => {
                    let msg = deno_core::v8::String::new_from_one_byte(
                            &mut scope,
                            arg1_err.as_bytes(),
                            deno_core::v8::NewStringType::Normal,
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return;
                }
            };
            let arg1 = arg1_temp.as_mut();
            Self::call(arg0, arg1)
        };
        deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv)
    }
    #[inline(always)]
    fn call(_a: &[u8], _b: &mut [u8]) {}
}

#[allow(non_camel_case_types)]
struct op_buffers_32 {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_buffers_32 {
    const NAME: &'static str = stringify!(op_buffers_32);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_buffers_32),
        false,
        false,
        false,
        2usize as u8,
        Self::v8_fn_ptr as _,
        Some({
            use deno_core::v8::fast_api::Type;
            use deno_core::v8::fast_api::CType;
            deno_core::v8::fast_api::FastFunction::new_with_bigint(
                &[
                    Type::V8Value,
                    Type::TypedArray(CType::Uint32),
                    Type::TypedArray(CType::Uint32),
                ],
                CType::Void,
                Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
            )
        }),
    );
}
impl op_buffers_32 {
    pub const fn name() -> &'static str {
        stringify!(op_buffers_32)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    fn v8_fn_ptr_fast(
        _: deno_core::v8::Local<deno_core::v8::Object>,
        arg0: *mut deno_core::v8::fast_api::FastApiTypedArray<u32>,
        arg1: *mut deno_core::v8::fast_api::FastApiTypedArray<u32>,
    ) -> () {
        let result = {
            let arg0 = (unsafe {
                deno_core::v8::fast_api::FastApiTypedArray::get_storage_from_pointer_if_aligned(
                    arg0,
                )
            }
                .expect("Invalid buffer"));
            let arg1 = (unsafe {
                deno_core::v8::fast_api::FastApiTypedArray::get_storage_from_pointer_if_aligned(
                    arg1,
                )
            }
                .expect("Invalid buffer"));
            Self::call(arg0, arg1)
        };
        result as _
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let result = {
            let arg0 = args.get(0usize as i32);
            let mut arg0_temp;
            arg0_temp = match unsafe {
                deno_core::_ops::to_v8_slice::<u32>(&mut scope, arg0)
            } {
                Ok(arg0) => arg0,
                Err(arg0_err) => {
                    let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
                    let msg = deno_core::v8::String::new_from_one_byte(
                            &mut scope,
                            arg0_err.as_bytes(),
                            deno_core::v8::NewStringType::Normal,
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return;
                }
            };
            let arg0 = arg0_temp.as_ref();
            let arg1 = args.get(1usize as i32);
            let mut arg1_temp;
            arg1_temp = match unsafe {
                deno_core::_ops::to_v8_slice::<u32>(&mut scope, arg1)
            } {
                Ok(arg1) => arg1,
                Err(arg1_err) => {
                    let msg = deno_core::v8::String::new_from_one_byte(
                            &mut scope,
                            arg1_err.as_bytes(),
                            deno_core::v8::NewStringType::Normal,
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return;
                }
            };
            let arg1 = arg1_temp.as_mut();
            Self::call(arg0, arg1)
        };
        deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv)
    }
    #[inline(always)]
    fn call(_a: &[u32], _b: &mut [u32]) {}
}

#[allow(non_camel_case_types)]
struct op_buffers_option {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_buffers_option {
    const NAME: &'static str = stringify!(op_buffers_option);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_buffers_option),
        false,
        false,
        false,
        2usize as u8,
        Self::v8_fn_ptr as _,
        None,
    );
}
impl op_buffers_option {
    pub const fn name() -> &'static str {
        stringify!(op_buffers_option)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let result = {
            let arg0 = args.get(0usize as i32);
            let mut arg0_temp;
            let arg0 = if arg0.is_null_or_undefined() {
                None
            } else {
                arg0_temp = match unsafe {
                    deno_core::_ops::to_v8_slice::<u8>(&mut scope, arg0)
                } {
                    Ok(arg0) => arg0,
                    Err(arg0_err) => {
                        let mut scope = unsafe {
                            deno_core::v8::CallbackScope::new(&*info)
                        };
                        let msg = deno_core::v8::String::new_from_one_byte(
                                &mut scope,
                                arg0_err.as_bytes(),
                                deno_core::v8::NewStringType::Normal,
                            )
                            .unwrap();
                        let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                        scope.throw_exception(exc);
                        return;
                    }
                };
                let arg0 = arg0_temp.as_ref();
                Some(arg0)
            };
            let arg1 = args.get(1usize as i32);
            let mut arg1_temp;
            let arg1 = if arg1.is_null_or_undefined() {
                None
            } else {
                arg1_temp = match unsafe {
                    deno_core::_ops::to_v8_slice::<u8>(&mut scope, arg1)
                } {
                    Ok(arg1) => arg1,
                    Err(arg1_err) => {
                        let msg = deno_core::v8::String::new_from_one_byte(
                                &mut scope,
                                arg1_err.as_bytes(),
                                deno_core::v8::NewStringType::Normal,
                            )
                            .unwrap();
                        let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                        scope.throw_exception(exc);
                        return;
                    }
                };
                let arg1 = deno_core::serde_v8::JsBuffer::from_parts(arg1_temp);
                Some(arg1)
            };
            Self::call(arg0, arg1)
        };
        deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv)
    }
    #[inline(always)]
    fn call(_a: Option<&[u8]>, _b: Option<JsBuffer>) {}
}
