#[allow(non_camel_case_types)]
/// This is a doc comment.
#[cfg(windows)]
pub struct op_maybe_windows {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_maybe_windows {
    const NAME: &'static str = stringify!(op_maybe_windows);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_maybe_windows),
        false,
        false,
        false,
        0usize as u8,
        Self::v8_fn_ptr as _,
        Some({
            use deno_core::v8::fast_api::Type;
            use deno_core::v8::fast_api::CType;
            deno_core::v8::fast_api::FastFunction::new_with_bigint(
                &[Type::V8Value],
                CType::Void,
                Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
            )
        }),
    );
}
impl op_maybe_windows {
    pub const fn name() -> &'static str {
        stringify!(op_maybe_windows)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    fn v8_fn_ptr_fast(_: deno_core::v8::Local<deno_core::v8::Object>) -> () {
        let result = { Self::call() };
        result as _
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let result = { Self::call() };
        deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv)
    }
    #[inline(always)]
    /// This is a doc comment.
    #[cfg(windows)]
    pub fn call() -> () {}
}

#[allow(non_camel_case_types)]
/// This is a doc comment.
#[cfg(not(windows))]
pub struct op_maybe_windows {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_maybe_windows {
    const NAME: &'static str = stringify!(op_maybe_windows);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_maybe_windows),
        false,
        false,
        false,
        0usize as u8,
        Self::v8_fn_ptr as _,
        Some({
            use deno_core::v8::fast_api::Type;
            use deno_core::v8::fast_api::CType;
            deno_core::v8::fast_api::FastFunction::new_with_bigint(
                &[Type::V8Value],
                CType::Void,
                Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
            )
        }),
    );
}
impl op_maybe_windows {
    pub const fn name() -> &'static str {
        stringify!(op_maybe_windows)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    fn v8_fn_ptr_fast(_: deno_core::v8::Local<deno_core::v8::Object>) -> () {
        let result = { Self::call() };
        result as _
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let result = { Self::call() };
        deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv)
    }
    #[inline(always)]
    /// This is a doc comment.
    #[cfg(not(windows))]
    pub fn call() -> () {}
}
