#[allow(non_camel_case_types)]
const fn op_cppgc_object() -> ::deno_core::_ops::OpDecl {
    #[allow(non_camel_case_types)]
    struct op_cppgc_object {
        _unconstructable: ::std::marker::PhantomData<()>,
    }
    impl ::deno_core::_ops::Op for op_cppgc_object {
        const NAME: &'static str = stringify!(op_cppgc_object);
        const DECL: ::deno_core::_ops::OpDecl = ::deno_core::_ops::OpDecl::new_internal_op2(
            ::deno_core::__op_name_fast!(op_cppgc_object),
            false,
            false,
            1usize as u8,
            Self::v8_fn_ptr as _,
            Self::v8_fn_ptr_metrics as _,
            Some({
                use deno_core::v8::fast_api::Type;
                use deno_core::v8::fast_api::CType;
                deno_core::v8::fast_api::FastFunction::new_with_bigint(
                    &[Type::V8Value, Type::V8Value, Type::CallbackOptions],
                    CType::Void,
                    Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
                )
            }),
            Some({
                use deno_core::v8::fast_api::Type;
                use deno_core::v8::fast_api::CType;
                deno_core::v8::fast_api::FastFunction::new_with_bigint(
                    &[Type::V8Value, Type::V8Value, Type::CallbackOptions],
                    CType::Void,
                    Self::v8_fn_ptr_fast_metrics as *const ::std::ffi::c_void,
                )
            }),
            ::deno_core::OpMetadata {
                ..::deno_core::OpMetadata::default()
            },
        );
    }
    impl op_cppgc_object {
        pub const fn name() -> &'static str {
            stringify!(op_cppgc_object)
        }
        #[allow(clippy::too_many_arguments)]
        extern "C" fn v8_fn_ptr_fast_metrics<'s>(
            this: deno_core::v8::Local<deno_core::v8::Object>,
            arg0: deno_core::v8::Local<deno_core::v8::Value>,
            fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions<
                's,
            >,
        ) -> () {
            let fast_api_callback_options: &'s mut _ = unsafe {
                &mut *fast_api_callback_options
            };
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<
                    deno_core::v8::External,
                >::cast(unsafe { fast_api_callback_options.data.data })
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_fast(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::v8_fn_ptr_fast(this, arg0, fast_api_callback_options);
            deno_core::_ops::dispatch_metrics_fast(
                opctx,
                deno_core::_ops::OpMetricsEvent::Completed,
            );
            res
        }
        #[allow(clippy::too_many_arguments)]
        extern "C" fn v8_fn_ptr_fast<'s>(
            this: deno_core::v8::Local<deno_core::v8::Object>,
            arg0: deno_core::v8::Local<deno_core::v8::Value>,
            fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions<
                's,
            >,
        ) -> () {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let fast_api_callback_options: &'s mut _ = unsafe {
                &mut *fast_api_callback_options
            };
            let result = {
                let Some(arg0) = deno_core::_ops::try_unwrap_cppgc_object::<Wrap>(arg0)
                else {
                    fast_api_callback_options.fallback = true;
                    return unsafe { std::mem::zeroed() };
                };
                Self::call(arg0)
            };
            result as _
        }
        #[inline(always)]
        fn slow_function_impl<'s>(
            info: &'s deno_core::v8::FunctionCallbackInfo,
        ) -> usize {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let result = {
                let arg0 = args.get(0usize as i32);
                let Some(arg0) = deno_core::_ops::try_unwrap_cppgc_object::<Wrap>(arg0)
                else {
                    let mut scope = unsafe { deno_core::v8::CallbackScope::new(info) };
                    let msg = deno_core::v8::String::new_from_one_byte(
                            &mut scope,
                            "expected Wrap".as_bytes(),
                            deno_core::v8::NewStringType::Normal,
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return 1;
                };
                Self::call(arg0)
            };
            deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv);
            return 0;
        }
        extern "C" fn v8_fn_ptr<'s>(info: *const deno_core::v8::FunctionCallbackInfo) {
            let info: &'s _ = unsafe { &*info };
            Self::slow_function_impl(info);
        }
        extern "C" fn v8_fn_ptr_metrics<'s>(
            info: *const deno_core::v8::FunctionCallbackInfo,
        ) {
            let info: &'s _ = unsafe { &*info };
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data())
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_slow(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::slow_function_impl(info);
            if res == 0 {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Completed,
                );
            } else {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Error,
                );
            }
        }
    }
    impl op_cppgc_object {
        #[inline(always)]
        fn call(_resource: &Wrap) {}
    }
    <op_cppgc_object as ::deno_core::_ops::Op>::DECL
}

#[allow(non_camel_case_types)]
const fn op_option_cppgc_object() -> ::deno_core::_ops::OpDecl {
    #[allow(non_camel_case_types)]
    struct op_option_cppgc_object {
        _unconstructable: ::std::marker::PhantomData<()>,
    }
    impl ::deno_core::_ops::Op for op_option_cppgc_object {
        const NAME: &'static str = stringify!(op_option_cppgc_object);
        const DECL: ::deno_core::_ops::OpDecl = ::deno_core::_ops::OpDecl::new_internal_op2(
            ::deno_core::__op_name_fast!(op_option_cppgc_object),
            false,
            false,
            1usize as u8,
            Self::v8_fn_ptr as _,
            Self::v8_fn_ptr_metrics as _,
            Some({
                use deno_core::v8::fast_api::Type;
                use deno_core::v8::fast_api::CType;
                deno_core::v8::fast_api::FastFunction::new_with_bigint(
                    &[Type::V8Value, Type::V8Value, Type::CallbackOptions],
                    CType::Void,
                    Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
                )
            }),
            Some({
                use deno_core::v8::fast_api::Type;
                use deno_core::v8::fast_api::CType;
                deno_core::v8::fast_api::FastFunction::new_with_bigint(
                    &[Type::V8Value, Type::V8Value, Type::CallbackOptions],
                    CType::Void,
                    Self::v8_fn_ptr_fast_metrics as *const ::std::ffi::c_void,
                )
            }),
            ::deno_core::OpMetadata {
                ..::deno_core::OpMetadata::default()
            },
        );
    }
    impl op_option_cppgc_object {
        pub const fn name() -> &'static str {
            stringify!(op_option_cppgc_object)
        }
        #[allow(clippy::too_many_arguments)]
        extern "C" fn v8_fn_ptr_fast_metrics<'s>(
            this: deno_core::v8::Local<deno_core::v8::Object>,
            arg0: deno_core::v8::Local<deno_core::v8::Value>,
            fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions<
                's,
            >,
        ) -> () {
            let fast_api_callback_options: &'s mut _ = unsafe {
                &mut *fast_api_callback_options
            };
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<
                    deno_core::v8::External,
                >::cast(unsafe { fast_api_callback_options.data.data })
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_fast(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::v8_fn_ptr_fast(this, arg0, fast_api_callback_options);
            deno_core::_ops::dispatch_metrics_fast(
                opctx,
                deno_core::_ops::OpMetricsEvent::Completed,
            );
            res
        }
        #[allow(clippy::too_many_arguments)]
        extern "C" fn v8_fn_ptr_fast<'s>(
            this: deno_core::v8::Local<deno_core::v8::Object>,
            arg0: deno_core::v8::Local<deno_core::v8::Value>,
            fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions<
                's,
            >,
        ) -> () {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let fast_api_callback_options: &'s mut _ = unsafe {
                &mut *fast_api_callback_options
            };
            let result = {
                let arg0 = if arg0.is_null_or_undefined() {
                    None
                } else if let Some(arg0) = deno_core::_ops::try_unwrap_cppgc_object::<
                    Wrap,
                >(arg0) {
                    Some(arg0)
                } else {
                    fast_api_callback_options.fallback = true;
                    return unsafe { std::mem::zeroed() };
                };
                Self::call(arg0)
            };
            result as _
        }
        #[inline(always)]
        fn slow_function_impl<'s>(
            info: &'s deno_core::v8::FunctionCallbackInfo,
        ) -> usize {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let result = {
                let arg0 = args.get(0usize as i32);
                let arg0 = if arg0.is_null_or_undefined() {
                    None
                } else if let Some(arg0) = deno_core::_ops::try_unwrap_cppgc_object::<
                    Wrap,
                >(arg0) {
                    Some(arg0)
                } else {
                    let mut scope = unsafe { deno_core::v8::CallbackScope::new(info) };
                    let msg = deno_core::v8::String::new_from_one_byte(
                            &mut scope,
                            "expected Wrap".as_bytes(),
                            deno_core::v8::NewStringType::Normal,
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return 1;
                };
                Self::call(arg0)
            };
            deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv);
            return 0;
        }
        extern "C" fn v8_fn_ptr<'s>(info: *const deno_core::v8::FunctionCallbackInfo) {
            let info: &'s _ = unsafe { &*info };
            Self::slow_function_impl(info);
        }
        extern "C" fn v8_fn_ptr_metrics<'s>(
            info: *const deno_core::v8::FunctionCallbackInfo,
        ) {
            let info: &'s _ = unsafe { &*info };
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data())
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_slow(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::slow_function_impl(info);
            if res == 0 {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Completed,
                );
            } else {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Error,
                );
            }
        }
    }
    impl op_option_cppgc_object {
        #[inline(always)]
        fn call(_resource: Option<&Wrap>) {}
    }
    <op_option_cppgc_object as ::deno_core::_ops::Op>::DECL
}

#[allow(non_camel_case_types)]
const fn op_make_cppgc_object() -> ::deno_core::_ops::OpDecl {
    #[allow(non_camel_case_types)]
    struct op_make_cppgc_object {
        _unconstructable: ::std::marker::PhantomData<()>,
    }
    impl ::deno_core::_ops::Op for op_make_cppgc_object {
        const NAME: &'static str = stringify!(op_make_cppgc_object);
        const DECL: ::deno_core::_ops::OpDecl = ::deno_core::_ops::OpDecl::new_internal_op2(
            ::deno_core::__op_name_fast!(op_make_cppgc_object),
            false,
            false,
            0usize as u8,
            Self::v8_fn_ptr as _,
            Self::v8_fn_ptr_metrics as _,
            None,
            None,
            ::deno_core::OpMetadata {
                ..::deno_core::OpMetadata::default()
            },
        );
    }
    impl op_make_cppgc_object {
        pub const fn name() -> &'static str {
            stringify!(op_make_cppgc_object)
        }
        #[inline(always)]
        fn slow_function_impl<'s>(
            info: &'s deno_core::v8::FunctionCallbackInfo,
        ) -> usize {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let mut scope = unsafe { deno_core::v8::CallbackScope::new(info) };
            let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
            let result = { Self::call() };
            rv.set(
                deno_core::_ops::RustToV8::to_v8(
                    deno_core::_ops::RustToV8Marker::<
                        deno_core::_ops::CppGcMarker,
                        _,
                    >::from(result),
                    &mut scope,
                ),
            );
            return 0;
        }
        extern "C" fn v8_fn_ptr<'s>(info: *const deno_core::v8::FunctionCallbackInfo) {
            let info: &'s _ = unsafe { &*info };
            Self::slow_function_impl(info);
        }
        extern "C" fn v8_fn_ptr_metrics<'s>(
            info: *const deno_core::v8::FunctionCallbackInfo,
        ) {
            let info: &'s _ = unsafe { &*info };
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data())
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_slow(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::slow_function_impl(info);
            if res == 0 {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Completed,
                );
            } else {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Error,
                );
            }
        }
    }
    impl op_make_cppgc_object {
        #[inline(always)]
        fn call() -> Wrap {
            Wrap
        }
    }
    <op_make_cppgc_object as ::deno_core::_ops::Op>::DECL
}

#[allow(non_camel_case_types)]
const fn op_use_cppgc_object() -> ::deno_core::_ops::OpDecl {
    #[allow(non_camel_case_types)]
    struct op_use_cppgc_object {
        _unconstructable: ::std::marker::PhantomData<()>,
    }
    impl ::deno_core::_ops::Op for op_use_cppgc_object {
        const NAME: &'static str = stringify!(op_use_cppgc_object);
        const DECL: ::deno_core::_ops::OpDecl = ::deno_core::_ops::OpDecl::new_internal_op2(
            ::deno_core::__op_name_fast!(op_use_cppgc_object),
            false,
            false,
            1usize as u8,
            Self::v8_fn_ptr as _,
            Self::v8_fn_ptr_metrics as _,
            Some({
                use deno_core::v8::fast_api::Type;
                use deno_core::v8::fast_api::CType;
                deno_core::v8::fast_api::FastFunction::new_with_bigint(
                    &[Type::V8Value, Type::V8Value, Type::CallbackOptions],
                    CType::Void,
                    Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
                )
            }),
            Some({
                use deno_core::v8::fast_api::Type;
                use deno_core::v8::fast_api::CType;
                deno_core::v8::fast_api::FastFunction::new_with_bigint(
                    &[Type::V8Value, Type::V8Value, Type::CallbackOptions],
                    CType::Void,
                    Self::v8_fn_ptr_fast_metrics as *const ::std::ffi::c_void,
                )
            }),
            ::deno_core::OpMetadata {
                ..::deno_core::OpMetadata::default()
            },
        );
    }
    impl op_use_cppgc_object {
        pub const fn name() -> &'static str {
            stringify!(op_use_cppgc_object)
        }
        #[allow(clippy::too_many_arguments)]
        extern "C" fn v8_fn_ptr_fast_metrics<'s>(
            this: deno_core::v8::Local<deno_core::v8::Object>,
            arg0: deno_core::v8::Local<deno_core::v8::Value>,
            fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions<
                's,
            >,
        ) -> () {
            let fast_api_callback_options: &'s mut _ = unsafe {
                &mut *fast_api_callback_options
            };
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<
                    deno_core::v8::External,
                >::cast(unsafe { fast_api_callback_options.data.data })
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_fast(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::v8_fn_ptr_fast(this, arg0, fast_api_callback_options);
            deno_core::_ops::dispatch_metrics_fast(
                opctx,
                deno_core::_ops::OpMetricsEvent::Completed,
            );
            res
        }
        #[allow(clippy::too_many_arguments)]
        extern "C" fn v8_fn_ptr_fast<'s>(
            this: deno_core::v8::Local<deno_core::v8::Object>,
            arg0: deno_core::v8::Local<deno_core::v8::Value>,
            fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions<
                's,
            >,
        ) -> () {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let fast_api_callback_options: &'s mut _ = unsafe {
                &mut *fast_api_callback_options
            };
            let result = {
                let Some(arg0) = deno_core::_ops::try_unwrap_cppgc_object::<Wrap>(arg0)
                else {
                    fast_api_callback_options.fallback = true;
                    return unsafe { std::mem::zeroed() };
                };
                Self::call(arg0)
            };
            result as _
        }
        #[inline(always)]
        fn slow_function_impl<'s>(
            info: &'s deno_core::v8::FunctionCallbackInfo,
        ) -> usize {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let result = {
                let arg0 = args.get(0usize as i32);
                let Some(arg0) = deno_core::_ops::try_unwrap_cppgc_object::<Wrap>(arg0)
                else {
                    let mut scope = unsafe { deno_core::v8::CallbackScope::new(info) };
                    let msg = deno_core::v8::String::new_from_one_byte(
                            &mut scope,
                            "expected Wrap".as_bytes(),
                            deno_core::v8::NewStringType::Normal,
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return 1;
                };
                Self::call(arg0)
            };
            deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv);
            return 0;
        }
        extern "C" fn v8_fn_ptr<'s>(info: *const deno_core::v8::FunctionCallbackInfo) {
            let info: &'s _ = unsafe { &*info };
            Self::slow_function_impl(info);
        }
        extern "C" fn v8_fn_ptr_metrics<'s>(
            info: *const deno_core::v8::FunctionCallbackInfo,
        ) {
            let info: &'s _ = unsafe { &*info };
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data())
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_slow(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::slow_function_impl(info);
            if res == 0 {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Completed,
                );
            } else {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Error,
                );
            }
        }
    }
    impl op_use_cppgc_object {
        #[inline(always)]
        fn call(_wrap: &Wrap) {}
    }
    <op_use_cppgc_object as ::deno_core::_ops::Op>::DECL
}

#[allow(non_camel_case_types)]
const fn op_make_cppgc_object_option() -> ::deno_core::_ops::OpDecl {
    #[allow(non_camel_case_types)]
    struct op_make_cppgc_object_option {
        _unconstructable: ::std::marker::PhantomData<()>,
    }
    impl ::deno_core::_ops::Op for op_make_cppgc_object_option {
        const NAME: &'static str = stringify!(op_make_cppgc_object_option);
        const DECL: ::deno_core::_ops::OpDecl = ::deno_core::_ops::OpDecl::new_internal_op2(
            ::deno_core::__op_name_fast!(op_make_cppgc_object_option),
            false,
            false,
            0usize as u8,
            Self::v8_fn_ptr as _,
            Self::v8_fn_ptr_metrics as _,
            None,
            None,
            ::deno_core::OpMetadata {
                ..::deno_core::OpMetadata::default()
            },
        );
    }
    impl op_make_cppgc_object_option {
        pub const fn name() -> &'static str {
            stringify!(op_make_cppgc_object_option)
        }
        #[inline(always)]
        fn slow_function_impl<'s>(
            info: &'s deno_core::v8::FunctionCallbackInfo,
        ) -> usize {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let mut scope = unsafe { deno_core::v8::CallbackScope::new(info) };
            let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
            let result = { Self::call() };
            rv.set(
                deno_core::_ops::RustToV8::to_v8(
                    result
                        .map(
                            deno_core::_ops::RustToV8Marker::<
                                deno_core::_ops::CppGcMarker,
                                _,
                            >::from,
                        ),
                    &mut scope,
                ),
            );
            return 0;
        }
        extern "C" fn v8_fn_ptr<'s>(info: *const deno_core::v8::FunctionCallbackInfo) {
            let info: &'s _ = unsafe { &*info };
            Self::slow_function_impl(info);
        }
        extern "C" fn v8_fn_ptr_metrics<'s>(
            info: *const deno_core::v8::FunctionCallbackInfo,
        ) {
            let info: &'s _ = unsafe { &*info };
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data())
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_slow(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::slow_function_impl(info);
            if res == 0 {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Completed,
                );
            } else {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Error,
                );
            }
        }
    }
    impl op_make_cppgc_object_option {
        #[inline(always)]
        fn call() -> Option<Wrap> {
            Some(Wrap)
        }
    }
    <op_make_cppgc_object_option as ::deno_core::_ops::Op>::DECL
}

#[allow(non_camel_case_types)]
const fn op_use_cppgc_object_option() -> ::deno_core::_ops::OpDecl {
    #[allow(non_camel_case_types)]
    struct op_use_cppgc_object_option {
        _unconstructable: ::std::marker::PhantomData<()>,
    }
    impl ::deno_core::_ops::Op for op_use_cppgc_object_option {
        const NAME: &'static str = stringify!(op_use_cppgc_object_option);
        const DECL: ::deno_core::_ops::OpDecl = ::deno_core::_ops::OpDecl::new_internal_op2(
            ::deno_core::__op_name_fast!(op_use_cppgc_object_option),
            false,
            false,
            1usize as u8,
            Self::v8_fn_ptr as _,
            Self::v8_fn_ptr_metrics as _,
            Some({
                use deno_core::v8::fast_api::Type;
                use deno_core::v8::fast_api::CType;
                deno_core::v8::fast_api::FastFunction::new_with_bigint(
                    &[Type::V8Value, Type::V8Value, Type::CallbackOptions],
                    CType::Void,
                    Self::v8_fn_ptr_fast as *const ::std::ffi::c_void,
                )
            }),
            Some({
                use deno_core::v8::fast_api::Type;
                use deno_core::v8::fast_api::CType;
                deno_core::v8::fast_api::FastFunction::new_with_bigint(
                    &[Type::V8Value, Type::V8Value, Type::CallbackOptions],
                    CType::Void,
                    Self::v8_fn_ptr_fast_metrics as *const ::std::ffi::c_void,
                )
            }),
            ::deno_core::OpMetadata {
                ..::deno_core::OpMetadata::default()
            },
        );
    }
    impl op_use_cppgc_object_option {
        pub const fn name() -> &'static str {
            stringify!(op_use_cppgc_object_option)
        }
        #[allow(clippy::too_many_arguments)]
        extern "C" fn v8_fn_ptr_fast_metrics<'s>(
            this: deno_core::v8::Local<deno_core::v8::Object>,
            arg0: deno_core::v8::Local<deno_core::v8::Value>,
            fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions<
                's,
            >,
        ) -> () {
            let fast_api_callback_options: &'s mut _ = unsafe {
                &mut *fast_api_callback_options
            };
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<
                    deno_core::v8::External,
                >::cast(unsafe { fast_api_callback_options.data.data })
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_fast(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::v8_fn_ptr_fast(this, arg0, fast_api_callback_options);
            deno_core::_ops::dispatch_metrics_fast(
                opctx,
                deno_core::_ops::OpMetricsEvent::Completed,
            );
            res
        }
        #[allow(clippy::too_many_arguments)]
        extern "C" fn v8_fn_ptr_fast<'s>(
            this: deno_core::v8::Local<deno_core::v8::Object>,
            arg0: deno_core::v8::Local<deno_core::v8::Value>,
            fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions<
                's,
            >,
        ) -> () {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let fast_api_callback_options: &'s mut _ = unsafe {
                &mut *fast_api_callback_options
            };
            let result = {
                let Some(arg0) = deno_core::_ops::try_unwrap_cppgc_object::<Wrap>(arg0)
                else {
                    fast_api_callback_options.fallback = true;
                    return unsafe { std::mem::zeroed() };
                };
                Self::call(arg0)
            };
            result as _
        }
        #[inline(always)]
        fn slow_function_impl<'s>(
            info: &'s deno_core::v8::FunctionCallbackInfo,
        ) -> usize {
            #[cfg(debug_assertions)]
            let _reentrancy_check_guard = deno_core::_ops::reentrancy_check(
                &<Self as deno_core::_ops::Op>::DECL,
            );
            let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(info);
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let result = {
                let arg0 = args.get(0usize as i32);
                let Some(arg0) = deno_core::_ops::try_unwrap_cppgc_object::<Wrap>(arg0)
                else {
                    let mut scope = unsafe { deno_core::v8::CallbackScope::new(info) };
                    let msg = deno_core::v8::String::new_from_one_byte(
                            &mut scope,
                            "expected Wrap".as_bytes(),
                            deno_core::v8::NewStringType::Normal,
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return 1;
                };
                Self::call(arg0)
            };
            deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv);
            return 0;
        }
        extern "C" fn v8_fn_ptr<'s>(info: *const deno_core::v8::FunctionCallbackInfo) {
            let info: &'s _ = unsafe { &*info };
            Self::slow_function_impl(info);
        }
        extern "C" fn v8_fn_ptr_metrics<'s>(
            info: *const deno_core::v8::FunctionCallbackInfo,
        ) {
            let info: &'s _ = unsafe { &*info };
            let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(
                info,
            );
            let opctx: &'s _ = unsafe {
                &*(deno_core::v8::Local::<deno_core::v8::External>::cast(args.data())
                    .value() as *const deno_core::_ops::OpCtx)
            };
            deno_core::_ops::dispatch_metrics_slow(
                opctx,
                deno_core::_ops::OpMetricsEvent::Dispatched,
            );
            let res = Self::slow_function_impl(info);
            if res == 0 {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Completed,
                );
            } else {
                deno_core::_ops::dispatch_metrics_slow(
                    opctx,
                    deno_core::_ops::OpMetricsEvent::Error,
                );
            }
        }
    }
    impl op_use_cppgc_object_option {
        #[inline(always)]
        fn call(_wrap: &Wrap) {}
    }
    <op_use_cppgc_object_option as ::deno_core::_ops::Op>::DECL
}
