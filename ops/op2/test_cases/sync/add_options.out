#[allow(non_camel_case_types)]
pub struct op_test_add_option {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl deno_core::_ops::Op for op_test_add_option {
    const NAME: &'static str = stringify!(op_test_add_option);
    const DECL: deno_core::_ops::OpDecl = deno_core::_ops::OpDecl::new_internal(
        stringify!(op_test_add_option),
        false,
        false,
        false,
        2usize as u8,
        Self::v8_fn_ptr as _,
        None,
    );
}
impl op_test_add_option {
    pub const fn name() -> &'static str {
        stringify!(op_test_add_option)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> deno_core::_ops::OpDecl {
        <Self as deno_core::_ops::Op>::DECL
    }
    extern "C" fn v8_fn_ptr(info: *const deno_core::v8::FunctionCallbackInfo) {
        let mut rv = deno_core::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let args = deno_core::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let result = {
            let arg0 = args.get(0usize as i32);
            let Some(arg0) = deno_core::_ops::to_u32_option(&arg0) else {
                let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
                let msg = deno_core::v8::String::new_from_one_byte(
                        &mut scope,
                        "expected u32".as_bytes(),
                        deno_core::v8::NewStringType::Normal,
                    )
                    .unwrap();
                let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                scope.throw_exception(exc);
                return;
            };
            let arg0 = arg0 as _;
            let arg1 = args.get(1usize as i32);
            let arg1 = if arg1.is_null_or_undefined() {
                None
            } else {
                let Some(arg1) = deno_core::_ops::to_u32_option(&arg1) else {
                    let mut scope = unsafe { deno_core::v8::CallbackScope::new(&*info) };
                    let msg = deno_core::v8::String::new_from_one_byte(
                            &mut scope,
                            "expected u32".as_bytes(),
                            deno_core::v8::NewStringType::Normal,
                        )
                        .unwrap();
                    let exc = deno_core::v8::Exception::type_error(&mut scope, msg);
                    scope.throw_exception(exc);
                    return;
                };
                let arg1 = arg1 as _;
                Some(arg1)
            };
            Self::call(arg0, arg1)
        };
        deno_core::_ops::RustToV8RetVal::to_v8_rv(result, &mut rv)
    }
    #[inline(always)]
    pub fn call(a: u32, b: Option<u32>) -> u32 {
        a + b.unwrap_or(100)
    }
}
