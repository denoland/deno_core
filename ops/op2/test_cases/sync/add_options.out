#[allow(non_camel_case_types)]
pub struct op_test_add_option {
    _unconstructable: ::std::marker::PhantomData<()>,
}
impl crate::_ops::Op for op_test_add_option {
    const NAME: &'static str = stringify!(op_test_add_option);
    const DECL: crate::_ops::OpDecl = crate::_ops::OpDecl::new_internal(
        stringify!(op_test_add_option),
        false,
        false,
        false,
        2usize as u8,
        Self::v8_fn_ptr as _,
        None,
    );
}
impl op_test_add_option {
    pub const fn name() -> &'static str {
        stringify!(op_test_add_option)
    }
    #[deprecated(note = "Use the const op::DECL instead")]
    pub const fn decl() -> crate::_ops::OpDecl {
        <Self as crate::_ops::Op>::DECL
    }
    extern "C" fn v8_fn_ptr(info: *const crate::v8::FunctionCallbackInfo) {
        let mut rv = crate::v8::ReturnValue::from_function_callback_info(unsafe {
            &*info
        });
        let args = crate::v8::FunctionCallbackArguments::from_function_callback_info(unsafe {
            &*info
        });
        let arg0 = args.get(0usize as i32);
        let arg0 = crate::_ops::to_u32(&arg0) as _;
        let arg1 = args.get(1usize as i32);
        let arg1 = if arg1.is_null_or_undefined() {
            None
        } else {
            let arg1 = crate::_ops::to_u32(&arg1) as _;
            Some(arg1)
        };
        let result = Self::call(arg0, arg1);
        rv.set_uint32(result as u32);
    }
    #[inline(always)]
    pub fn call(a: u32, b: Option<u32>) -> u32 {
        a + b.unwrap_or(100)
    }
}
